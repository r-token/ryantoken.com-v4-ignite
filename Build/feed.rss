<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Ryan Token</title><description></description><link>https://www.ryantoken.com</link><atom:link
    href="https://www.ryantoken.com/feed.rss"
    rel="self" type="application/rss+xml"
/><language>en</language><generator>Ignite v0.6.0</generator><item><guid isPermaLink="true">https://www.ryantoken.com/blog/swift-everywhere-web</guid><title>Swift Everywhere: Web Edition</title><link>https://www.ryantoken.com/blog/swift-everywhere-web</link><description><![CDATA[I’ve got a fever, and the only prescription is rewriting my website in Swift (again).]]></description><pubDate>Mon, 21 Jul 2025 12:00:00 +0000</pubDate><dc:creator><![CDATA[Ryan Token]]></dc:creator><category><![CDATA[swift]]></category><category><![CDATA[web]]></category><category><![CDATA[rewrite]]></category><content:encoded><![CDATA[<p>I’ve got a fever, and the only prescription is rewriting my website in Swift (<a href="https://www.ryantoken.com/blog/rebuilding-my-website">again</a>).</p><p>This is the first, or maybe <a href="https://www.ryantoken.com/blog/serverless-swift">second</a>, in what I’m hoping will be a recurring series of posts about writing Swift for non-Apple platforms.</p><p>As I wrote in <a href="https://www.ryantoken.com/blog/a-new-day-dawns">A New Day(sheets) Dawns</a>, I am fully on board for the vision of <strong>Swift everywhere</strong>. Swift on <a href="https://www.swift.org/getting-started/swiftui/">iOS</a>, Swift on <a href="https://www.swift.org/android-workgroup/">Android</a>, Swift on <a href="https://www.swift.org/blog/swift-everywhere-windows-interop/">Windows</a>, Swift in the <a href="https://www.swift.org/get-started/cloud-services/">cloud</a>, Swift on the <a href="https://www.swift.org/get-started/command-line-tools/">command line</a>… You get the idea.</p><p>One of my favorite projects, and thus favorite posts, is about running <a href="https://www.ryantoken.com/blog/serverless-swift">Swift on AWS Lambda</a> to flash my Hue lightbulbs various colors whenever my favorite teams score or win. If I were to rename that post today, I’d consider it the first in this series and call it <em>Swift Everywhere: Serverless Edition</em>.</p><p>This post, however, is all about <strong>Swift on the web</strong>.</p><h2>Inspiration</h2><p>The inspiration to rebuild my website with Swift came from two primary sources:</p><ol><li><a href="https://x.com/twostraws">Paul Hudson</a> launched <a href="https://github.com/twostraws/Ignite">Ignite</a> - a static site generator for Swift developers</li><li>David Heinemeier Hansson’s (aka DHH) <a href="https://lexfridman.com/dhh-david-heinemeier-hansson/">six-hour podcast</a> with Lex Fridman</li></ol><h3>Paul launches Ignite</h3><p>I wrote an early version of my website in Swift using <a href="https://github.com/JohnSundell/Publish">Publish</a> by John Sundell. While I loved the concept, I never quite found my footing with it. So when I saw that Paul had released Ignite, I was thrilled.</p><p>Ignite is essentially a modern take on Publish (down to the exact same ‘About’ description on GitHub), but with a SwiftUI-like syntax powered by Swift’s <a href="https://www.hackingwithswift.com/swift/5.4/result-builders">result builders</a>. It also implements <a href="https://getbootstrap.com">Bootstrap</a> to handle issues with browser and device compatibility, complex UI elements, and accessibility. I watched the <a href="https://www.youtube.com/watch?v=JJGLoo3A2uk">how and why video</a> behind Ignite, read J.P. Toro’s <a href="https://jptoro.dev/lighting-ignite-on-fire/">Lighting Ignite on Fire</a> post, and was hooked. I built the CLI tool, ran <code>ignite new ExampleSite</code>, and got going.</p><p>However, I hit a bit of a false start. I looked at my <a href="https://ryantoken-v3-svelte.vercel.app/">current/previous site</a> and thought, “I actually really like this site, why go through the effort of a rewrite?” That, plus a barrage of work and life events, had me hitting the pause button.</p><h3>The Search for Code Poetry</h3><p>It wasn’t until I listened to the aforementioned Lex Fridman podcast featuring DHH a few months later that inspiration struck again, this time for good.</p><p>In particular, one specific concept stuck with me above all others from that six-hour interview: the idea that “writing code could feel as good as writing a poem” (<a href="https://youtu.be/vagyIcmIGOQ?si=kL8L7XOrsPNrfg8W&t=7947">2:12:27</a>). In the era of prompt engineering and handing over large swaths of work to an AI assistant, this rang so true to me. Let me be clear: I use AI for my work every day. I find it completely invaluable. But I’ve also found that handing over <em>too much</em> of my work to AI is so much less satisfying than “chiseling beautiful code poems out of the editor” (<a href="https://youtu.be/vagyIcmIGOQ?si=cDQDaZ8tj4igfgmO&t=9557">2:39:17</a>). That’s what I want, especially for personal projects, and that’s what I feel like I can achieve with Swift.</p><p>I took another look at the code for my Svelte site and did not see poetry. I saw long, ugly, inline Tailwind classes, large <code>script</code> and <code>head</code> blocks for even the most straightforward pages, and a project structure that works fine but that I simply find cumbersome. Granted, I chose to use Tailwind, and I’m not the world’s greatest web developer—I’m sure there are much more poetic Svelte sites out there—but I was not going to be the one to write the next Svelte sonnet.</p><p>I compared that to some of the sample Ignite code in Swift, and I saw the opportunity to massively simplify my codebase with my favorite language.</p><h2>Ignition</h2><p>With Ignite ready for production and DHH’s code poetry ringing in my ears, I was ready to roll. Suddenly I could write “web” code that looked just like the SwiftUI I know and love.</p><p>Let’s start with an example. This is the Swift file that generates my ‘Blog’ page:</p><pre><code class="language-swift">struct Blog: StaticPage {
    @Environment(\.articles) var articles

    var title = "Ryan Token - Blog"
    var description = "All of Ryan's blog posts."
    var image: URL? = URL(static: Constants.staticProfileImagePath)

    var sortedArticles: [Article] {
        articles.all.sorted(by: \.date).reversed()
    }

    var body: some HTML {
        HeaderText("Blog", size: .h2)
        SubheaderText("All blog posts. Subscribe to my [RSS feed](/feed.rss).")
            .padding(.bottom)

        ForEach(sortedArticles) { article in
            ArticlePreview(for: article)
                .articlePreviewStyle(DynamicArticlePreviewStyle())
        }
    }
}
</code></pre><p>That’s it. That’s the <em>entire</em> Swift file. Poetry, I tell you. Nearly every file across the website is so much clearer and more concise than what I had to do to achieve the same results in Svelte.</p><p>I don’t think there’s much value in me showing you <em>how</em> to set up an Ignite site: Paul’s own <a href="https://ignitesamples.hackingwithswift.com">Ignite Samples</a> website has most of the reference material you’ll need. There are, however, a couple of aspects not covered in his samples that I wanted for my site. It took some minor digging on my part to figure them out, so I’ll share those here:</p><ol><li>Syntax highlighting in markdown</li><li>Configuring the RSS feed</li></ol><h3>Syntax highlighting in markdown</h3><p>While Ignite offers the <a href="https://ignitesamples.hackingwithswift.com/code-examples/">Code and CodeBlock</a> structs for syntax highlighting within your Swift files, you can’t use those in markdown. I use markdown files in the <a href="https://ignitesamples.hackingwithswift.com/content-examples/">Content</a> folder to render my blog posts, many of which contain code samples, so I needed to figure this out.</p><p>The answer is two-fold and quite simple:</p><ol><li>You need to add a <code>syntaxHighlighterConfiguration</code> to your main <code>Site</code> struct:<pre><code class="language-swift">var syntaxHighlighterConfiguration: SyntaxHighlighterConfiguration = .init(languages: [.swift])
</code></pre></li><li>You can then set a <code>syntaxHighlighterTheme</code> in your <code>Theme</code> file like so:<pre><code class="language-swift">var syntaxHighlighterTheme: HighlighterTheme { .githubDark }
</code></pre></li></ol><p>And that’s it! Now when you make a code block like this in markdown, it will be nicely formatted with your choice of syntax highlighter theme:</p><pre><code class="language-swift">```swift
struct SocialProfile {
    let url: String
    let icon: String // from icons.getbootstrap.com
    let iconDescription: String
    let lightModeColor: String // Hex color for light mode
    let darkModeColor: String  // Hex color for dark mode
}
```
</code></pre><h3>Configuring the RSS feed</h3><p>I love <a href="https://www.rssboard.org/rss-specification">RSS</a>. I’ve supported it on my website for years, and the majority of what I read gets to me via RSS. Supporting it again in this rewrite was a non-negotiable. While I figured Ignite had some way to generate an RSS feed from your content, I didn’t see any official documentation or samples showing it.</p><p>It was, of course, supported—and it’s one of my favorite parts of Ignite. In fact, you get it for free! Every Ignite site gets a default implementation of <code>FeedConfiguration</code>, which looks like this:</p><pre><code class="language-swift">static let `default` = FeedConfiguration(mode: .descriptionOnly, contentCount: 20, path: "/feed.rss")
</code></pre><p>That means if you’re using the <code>Content</code> folder for your blog posts, you automatically get RSS feed generation at <code>https://your-website.com/feed.rss</code> with the basic details for your twenty most recent posts—no RSS-specific code required.</p><p>Just awesome. I wanted to customize my feed though, and that’s nicely supported as well. In your main <code>Site</code> struct, you can define your own feed configuration like this:</p><pre><code class="language-swift">var feedConfiguration = FeedConfiguration(mode: .full, contentCount: 1000, path: "/feed.rss")
</code></pre><p>That will generate an RSS feed that includes the full content of all my posts. One line of configuration code to customize the feed! Beautiful.</p><h2>Speed and Simplicity</h2><p>Due to the simplicity of Ignite and the HTML it generates, the Ignite site loads noticeably faster than my previous SvelteKit site. SvelteKit is no slouch when it comes to bundle size and speed—that’s why I chose <a href="https://www.ryantoken.com/blog/nuxt-3-vs-sveltekit">SvelteKit over Nuxt 3</a> in the first place. But Ignite beats out even SvelteKit in page load speed. Try loading them yourself:</p><ul><li>SvelteKit site: <a href="https://ryantoken-v3-svelte.vercel.app/">https://ryantoken-v3-svelte.vercel.app/</a></li><li>Ignite site (this site): <a href="https://www.ryantoken.com">https://www.ryantoken.com</a></li></ul><p>Ignite’s simplicity is shown in some of the code samples above, but it’s also clearly demonstrated in the total lines of code required to build each site. Here’s the breakdown, counted by <a href="https://github.com/AlDanial/cloc">cloc</a>:</p><p><strong>SvelteKit</strong>: <strong>2,974 total lines of code</strong></p><ul><li>Excludes SvelteKit’s <code>build</code> directory, <code>node_modules</code>, hidden files and folders, and <code>package-lock.json</code></li></ul><pre><code>-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Markdown                        15            849              0           1486
Svelte                          22            306              4           1146
JavaScript                      11             33              7            170
CSS                              2             17              8             99
JSON                             4              0              0             53
HTML                             1              0              4             17
Text                             2              0              0              3
-------------------------------------------------------------------------------
SUM:                            57           1205             23           2974
-------------------------------------------------------------------------------
</code></pre><p><strong>Ignite</strong>: <strong>2,479 total lines of code</strong></p><ul><li>Excludes the <code>Build</code> folder and all hidden files and folders</li></ul><p><em>Note that the Ignite site also has an additional blog post that the SvelteKit site doesn’t have (this blog post)</em></p><pre><code>-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
Markdown                        15            838              0           1402
Swift                           31            275            187           1067
HTML                             6              2              0             10
-------------------------------------------------------------------------------
SUM:                            52           1115            187           2479
-------------------------------------------------------------------------------
</code></pre><p>Nearly 500 fewer lines of code! A 17% reduction. For a simple site like this, that is significant.</p><p>This rewrite confirmed something I suspected but hadn’t fully experienced: Swift really can make web development feel as elegant as writing SwiftUI. The code just flows in a way that my Svelte setup never did. And those five hundred fewer lines of code? That’s not just a smaller bundle—it’s code that represents clearer intent, better organization, and better maintainability.</p><h2>Catching Fire</h2><p>I am genuinely stoked about Ignite. It feels like it was made for developers like me and comes with so many obvious wins:</p><ol><li>Building websites with Swift, my favorite language</li><li>Styling them with a SwiftUI-like syntax</li><li>The simplest blog + markdown setup I have ever used</li><li>A simple and powerful <a href="https://ignitesamples.hackingwithswift.com/theme-examples/">theming engine</a></li><li>Automatically generating my <a href="https://validator.w3.org/feed/check.cgi?url=https%3A%2F%2Fwww.ryantoken.com%2Ffeed.rss">valid</a> RSS feed with little to no config</li><li>The ability to <a href="https://ignitesamples.hackingwithswift.com/include-examples/">inject</a> arbitrary HTML and JavaScript when necessary</li><li>Built-in Bootstrap integration for responsive design</li><li>Excellent performance out of the box</li></ol><br />
<p><img src="https://www.ryantoken.com/images/ignite.png" alt="Ignite logo" class="img-fluid"></p><br />
<p>Rewriting my website with Ignite was an absolute joy. And I did it in less than a week! SvelteKit remains a wonderful framework, but it’s much more powerful than what I need for a personal static site like this. Ignite is tailor-made for developers like me who love Swift and SwiftUI, and want to bring that same elegance and simplicity to the web. I couldn’t be happier with the results.</p><p>If you’re a Swift developer who’s been curious about web development, or if you’re looking for a simpler way to build static sites, I can’t recommend Ignite highly enough. It’s another feather in the cap of “Swift everywhere.”</p><p>Thanks for reading, and feel free to <a href="mailto:ryantoken13@gmail.com">get in touch</a> if you have feedback on this blog post or the site in general. I’d love to hear from you!</p><p>And if you particularly enjoyed this post, you can <a href="https://www.buymeacoffee.com/ryantoken">buy me a coffee</a>!</p><p><a href="https://www.buymeacoffee.com/ryantoken"><img src="https://www.ryantoken.com/images/bmc-button.png" class="img-fluid w-50"></a></p><p><br /> <br /></p><p><strong>Previous posts in <em>Swift Everywhere</em></strong>:</p><ul><li><a href="https://www.ryantoken.com/blog/serverless-swift">Serverless Swift</a> (a.k.a. Swift Everywhere: Serverless Edition)</li></ul>]]></content:encoded></item><item><guid isPermaLink="true">https://www.ryantoken.com/blog/a-new-day-dawns</guid><title>A New Day(sheets) Dawns</title><link>https://www.ryantoken.com/blog/a-new-day-dawns</link><description><![CDATA[day sheet \ ˈdā-ˌshēt \ noun : a concise snapshot of the day ahead that is shared with the touring party.]]></description><pubDate>Mon, 09 Jun 2025 12:00:00 +0000</pubDate><dc:creator><![CDATA[Ryan Token]]></dc:creator><category><![CDATA[swift]]></category><category><![CDATA[swiftui]]></category><category><![CDATA[career]]></category><content:encoded><![CDATA[<p><strong>day sheet</strong> \ ˈdā-ˌshēt \ <em>noun</em> : a concise snapshot of the day ahead that is shared with the touring party.</p><p>After more than four incredible years of building <a href="https://storyboard.com">Storyboard</a>, I’m joining <a href="https://www.daysheets.com">Daysheets</a> as a senior software engineer working across Apple platforms with Swift and SwiftUI.</p><p>My decision to switch gears has less to do with leaving Storyboard and much more to do with joining Daysheets. I’ve narrowed down why I’m fired up about Daysheets to the following reasons:</p><p>First, what is Daysheets? The short version is software to solve tour and production management for artists and their tour managers.</p><p><img src="https://www.ryantoken.com/images/daysheets/daysheets.webp" alt="Daysheets marketing image featuring the iOS and macOS apps" class="img-fluid"></p><p>As mentioned at the top, a day sheet is a music industry term for a physical sheet of paper that tour managers slide under the doors of the artists and touring party every day of a tour detailing that day’s itinerary. The core Daysheets product is exactly that, but enhanced by software and AI, and accessible across your devices. It’s sleek, modern, mobile-friendly, and growing fast.</p><p>But it doesn’t stop there. Daysheets is expanding into <a href="https://www.daysheets.travel">travel</a> - think flight coordination, hotel bookings, and bus routes. Planning all of that for every leg of a tour is a nightmare for tour managers and travel agents. There is so much opportunity to streamline this for the industry.</p><p>I’m beyond excited to help build the future of the product, dig into native macOS development, and integrate even further with AI.</p><p>Beyond the product opportunity, I’m drawn to this even further because I love music and always have. I play guitar and piano, played in rock bands all through high school (and one <a href="https://www.youtube.com/watch?v=TU9zvfSFGm4">ska band</a>), and enjoy learning about what life on the road is really like for artists and the folks surrounding them. This role gets me closer to that world.</p><h2>The founders</h2><p>The co-founders, <a href="https://www.linkedin.com/in/benmelman/">Ben Melman</a> and <a href="https://www.linkedin.com/in/isaac-sheldon/">Isaac Sheldon</a>, have what you need.</p><p>Ben was a production manager and tour manager for ten years in the music industry. He knows the customer we’re building for because he <em>was</em> that customer for a decade.</p><p>Isaac has an extensive software engineering history of leading teams at and writing software for Microsoft, Google, Zillow, and more.</p><p>That’s a powerful duo, and one that I know I can and will learn a lot from.</p><p>I joined Storyboard in 2021 largely because of the fit and energy I felt between the founder and the industry they were going after at the time. I feel that same fire from the founders at Daysheets.</p><h2>Going deep on Swift</h2><p>As some in the software industry zag away from native development in favor of cross-platform alternatives like React Native and Flutter, Daysheets is zigging. They’re embracing Apple’s first-class development ecosystem around Swift and SwiftUI. I think that’s the right move long term.</p><p>Personally, I’ve never been more enthusiastic about <a href="https://www.swift.org">Swift</a>. Both Apple and the broader Swift community are <a href="https://www.swift.org/platform-steering-group/">pushing hard</a> for it to be embraced across a wide variety of environments, including the cloud, the command line, embedded software like microcontrollers, and of course iOS and the rest of Apple’s platforms. I recently wrote about <a href="https://www.ryantoken.com/blog/serverless-swift">my own experience</a> writing and deploying Swift onto AWS Lambda to remotely control the Philips Hue lightbulbs here at my house when my favorite teams score or win.</p><p>The vision is <strong>Swift everywhere</strong>. Swift on <a href="https://www.swift.org/getting-started/swiftui/">iOS</a>, Swift in the <a href="https://www.swift.org/get-started/cloud-services/">cloud</a>, Swift on the <a href="https://www.swift.org/get-started/command-line-tools/">command line</a>, Swift on <a href="https://skip.tools">Android</a>, Swift on <a href="https://www.swift.org/blog/swift-everywhere-windows-interop/">Windows</a>… You get the idea.</p><p>Swift is my favorite programming language, SwiftUI clicked for me immediately when it was <a href="https://developer.apple.com/videos/play/wwdc2019/204">introduced</a> in 2019, and I couldn’t be more excited to go even deeper with all of it at Daysheets.</p><h2>I love startups</h2><p>Four years at Storyboard proved to me that the startup world is an amazing place for me to be, at least at this point in my career. I’m drawn to the energy and scrappiness, I thrive in a small, tight-knit group, and I love the ownership and agency I’m trusted with.</p><p>I also can’t get enough of the “prove it” attitude startups must have to win. There are always bigger, more established, incumbents. You have to prove, over and over again, that your product is that much better than what’s out there. So much so that folks should change what they’re comfortable with and use your thing instead. That takes determination, grit, and a whole lot of hard work. I’m stoked to help build that product for the touring industry.</p><h2>Let’s go</h2><p>I start today. June 9, 2025. The same day that Apple’s <a href="https://developer.apple.com/wwdc25/">WWDC 2025</a> kicks off. Starting a new Swift-heavy role on the biggest day of the year for Swift developers. Extremely fitting. I can’t wait.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.ryantoken.com/blog/serverless-swift</guid><title>Serverless Swift</title><link>https://www.ryantoken.com/blog/serverless-swift</link><description><![CDATA[It’s Swift on Server, minus the server. Deployed on AWS via Swift Cloud.]]></description><pubDate>Mon, 24 Feb 2025 12:00:00 +0000</pubDate><dc:creator><![CDATA[Ryan Token]]></dc:creator><category><![CDATA[serverless]]></category><category><![CDATA[swift]]></category><category><![CDATA[aws]]></category><content:encoded><![CDATA[<p>It’s <a href="https://www.swift.org/documentation/server/">Swift on Server</a>, minus the server. Deployed on AWS via <a href="https://github.com/swift-cloud/swift-cloud">Swift Cloud</a>.</p><p>I’ve long been interested in running Swift on the back end, but it wasn’t until a combination of a fun project idea and a spark from Swift Cloud that I was inspired to dig in and try it out. But why do it this way? How does it work? And how well does it run in terms of cost and performance? We’ll break all of that down.</p><p>I built an event-driven serverless back end entirely in Swift that remotely flashes the Philips Hue bulbs in my house whenever my favorite sports teams score or win. It runs on AWS services including Lambda, DynamoDB, SQS, and EventBridge, and costs less than $0.20/month.</p><p>You can view the full source code for this project on <a href="https://github.com/r-token/sports-home-automation-swift">GitHub</a>.</p><h2>Background</h2><p>They say the only constant in life is change, and that has certainly been the case for my career in software development. I got started in front-end web development, grew to pick up traditional back-end development, fell in love with <a href="https://aws.amazon.com/serverless/">serverless</a> back-end development, and then turned my favorite pastime into my full-time job building native Swift apps for iOS.</p><p>For the last several years, I’ve locked in on the two areas I’m most passionate about and enjoy the most: serverless back-end development and native iOS development with Swift.</p><p>I’ve written independently about both <a href="https://www.ryantoken.com/blog/tags/serverless">serverless</a> and <a href="https://www.ryantoken.com/blog/tags/swift">Swift</a> before, but this is the first time I’ve gotten to combine the two. It’s been a ton of fun working on the project and writing this post.</p><h2>Why Serverless?</h2><p>The first thing that comes to mind when you think Swift on Server is probably <a href="https://vapor.codes">Vapor</a>, or maybe <a href="https://hummingbird.codes">Hummingbird</a>. I am interested in both, and have used Vapor in the past, but I leaned on serverless for this project for reasons that I could talk about for days.</p><p>To keep it brief, I simply enjoy building serverless systems. Once you understand the primitives, serverless offers the best combination of speed, cost, fun, and scale that I know of. It’s not a cure-all, but it’s great for projects like this.</p><p>Additionally:</p><ol><li>It’s in the name - you never have to deal with servers</li><li>It’s cheap, especially for small projects like this one. More on cost later</li><li>It automatically scales up and down. Ideally to zero</li><li>It’s simple to configure basic services</li><li>You can write the services in <a href="https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html">any language</a></li><li><a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">Infrastructure as Code</a> platforms make hooking up the primitives seamless</li></ol><h2>Why Swift?</h2><p>Honestly, the main reason is because I thought it would be fun. And it was! I had a blast building this.</p><p>There are other, more pragmatic, reasons as well:</p><ol><li>It’s the language I know best - I use it to write all of my iOS apps</li><li>It promises excellent performance and a low memory footprint</li><li>It does not incorporate a <a href="https://en.wikipedia.org/wiki/Just-in-time_compilation">Just-In-Time (JIT) compiler</a>, which conserves CPU and memory resources and results in quicker Lambda startup times</li><li>It uses <a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/automaticreferencecounting/">Automatic Reference Counting</a>, which allows for deterministic performance</li><li>It’s strongly typed, null-safe, and a joy to write</li><li>It has a robust and modern <a href="https://swiftpackageindex.com">package ecosystem</a></li></ol><h2>The Project</h2><p>As mentioned above, it’s a serverless system written in Swift that controls Philips Hue bulbs in my house whenever my favorite sports teams (Tulsa football & basketball, Eagles football) score or win. It runs on AWS Lambda, DynamoDB, SQS, and EventBridge.</p><h3>Tools</h3><p>I used <a href="https://developer.apple.com/xcode/">Xcode</a> to build it, but any editor that supports the <a href="https://github.com/swiftlang/sourcekit-lsp">SourceKit-LSP</a> will work - including VS Code, Neovim, Emacs, Nova, and others.</p><p>The deployment engine that makes this project go is <a href="https://github.com/swift-cloud/swift-cloud">Swift Cloud</a>. It’s the infrastructure as code tool I use to deploy my Swift package to AWS with the configuration I define. Specifically, Swift Cloud vends Swift components like <code>AWS.Function()</code> that get compiled into <a href="https://www.pulumi.com/">Pulumi</a> YAML files. The Pulumi CLI deploys that configuration to the cloud when you run Swift Cloud’s <code>swift run Infra deploy</code> command. Notably, you don’t need to know anything about Pulumi to use Swift Cloud. It’s just used internally.</p><p>I’ve used other IaC tools like the <a href="https://www.serverless.com">Serverless Framework</a> and <a href="https://sst.dev">SST</a>. They are great, but they either don’t support custom runtimes like the <a href="https://github.com/swift-server/swift-aws-lambda-runtime">swift-aws-lambda-runtime</a> at all, or require the use of <a href="https://aws.amazon.com/blogs/aws/new-for-aws-lambda-use-any-programming-language-and-share-common-components/">Lambda Layers</a> to use them. Swift Cloud supports it out of the box with no hassle. It’s been great to work with.</p><h3>Infrastructure</h3><p>The project currently consists of six primary pieces of infrastructure, all of which are defined within <code>Sources/Infra/Project.swift</code>:</p><ol><li>A cron job managed by <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-what-is.html">EventBridge</a> that triggers my scheduler function</li><li>A scheduler <a href="https://docs.aws.amazon.com/lambda/latest/dg/welcome.html">Lambda</a> function that fires off SQS events every 10 seconds</li><li>An <a href="https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/welcome.html">SQS</a> queue to hold those events</li><li>A poller Lambda function triggered by SQS that polls the <a href="https://github.com/henrygd/ncaa-api">ncaa-api</a> for Tulsa football, men’s basketball, and women’s basketball scores, and the <a href="https://github.com/pseudo-r/Public-ESPN-API">public-espn-api</a> for Eagles scores. It writes those results to DynamoDB</li><li>A <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html">DynamoDB</a> table that keeps track of the games found in the previous step</li><li>A processor Lambda function triggered by <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html">DynamoDB Streams</a> that checks the scores for those teams I care about, and if they scored (football only) or won, make my Philips Hue lights go nuts in that team’s colors</li></ol><p>The basic data flow looks like this:</p><p><img src="https://www.ryantoken.com/images/serverless-swift/infra-diagram.png" alt="Serverless Swift infrastructure diagram" class="img-fluid"></p><p>It also consists of two other pieces of infrastructure used to refresh my Hue API tokens every three days:</p><ol><li>A cron job managed by EventBridge that triggers my token refresher function</li><li>A token refresher Lambda function that refreshes my Hue API tokens</li></ol><h3>Project Configuration</h3><p>I won’t go through the code in too much depth. You can look through all of it yourself on <a href="https://github.com/r-token/sports-home-automation-swift">GitHub</a>. But I will cover the key elements.</p><h4>Package.swift</h4><p>First, you have to create a new Swift package. Since I used Xcode as my editor, I did this from Xcode by navigating to <code>File -> New -> Package</code>, chose <code>macOS</code> as the platform, and chose <code>Executable</code> as the package type. Alternatively, you can do it via the CLI by running <code>swift package init --name MySwiftPackage --type executable</code>.</p><p>Once your package is created, you need at minimum a single <code>.executableTarget</code> which will point to the file containing your infrastructure definitions, plus the Swift Cloud dependency.</p><p>At its most basic, that looks like this:</p><pre><code class="language-swift">import PackageDescription

let package = Package(
	name: "MySwiftPackage",
	dependencies: [
		.package(url: "https://github.com/swift-cloud/swift-cloud.git", branch: "main"),
	],
	targets: [
		.executableTarget(
			name: "Infra",
			dependencies: [
				.product(name: "Cloud", package: "swift-cloud")
			]
		)
	]
)
</code></pre><p>I called my target Infra, as that was the default name Swift Cloud suggested, but you can call it whatever you’d like.</p><p>Once you have that set up, you need to create a folder called <code>Sources</code>, a folder inside <code>Sources</code> named whatever you named your <code>.executableTarget</code> above, and then a Swift file named whatever you want - I used <code>Project.swift</code>.</p><h4>Project.swift</h4><p><code>Project.swift</code> is where you define your infrastructure. I housed all six of the pieces of infrastructure I needed within this one file, but nothing is stopping you from breaking this up into multiple files and configuring it however you’d like.</p><p>This file is where you configure the resource primitives you want to use, like functions, databases, queues, and more.</p><p>Swift Cloud provides these components for you across a variety of cloud providers. AWS is my cloud of choice, though they also offer providers for Cloudflare, Digital Ocean, Fastly, and Vercel.</p><p>I mentioned I use EventBridge for cron jobs, Lambda for processing, SQS as a queue system, and DynamoDB for data storage. In Swift Cloud, configuring those is as simple as this:</p><pre><code class="language-swift">let pollerCron = AWS.Cron(
	"sports-api-cron-job",
	schedule: .rate(.minutes(1))
)

let sportsApiScheduler = AWS.Function(
	"sports-api-scheduler",
	targetName: "Scheduler"
)

let sportsApiPollerQueue = AWS.Queue("sports-api-poller-queue")

let scoresTable = AWS.DynamoDB(
	"Scores",
	primaryIndex: .init(
		partitionKey: ("gameId", .string)
	),
	streaming: .enabled(viewType: .newAndOldImages)
)
</code></pre><p>Permissions are automatically created and managed for you when you link two resources together via methods on the resources themselves, like this:</p><pre><code class="language-swift"> pollerCron.invoke(sportsApiScheduler)
 sportsApiScheduler.link(sportsApiPollerQueue)
 sportsApiPollerQueue.subscribe(sportsApiPoller)
 scoresTable.subscribe(scoreProcessor)
</code></pre><p>You can also create custom permissions yourself via the <code>Link</code> struct provided by Swift Cloud, which takes in a standard array of <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/introduction.html">IAM</a> permissions and resources to give extra access where needed.</p><p>More details on all of those in <a href="https://github.com/r-token/sports-home-automation-swift/blob/main/Sources/Infra/Project.swift">Project.swift</a> in the GitHub repo.</p><h4>Targets</h4><p>Each Lambda function I have gets its own <code>.executableTarget</code> in <code>Package.swift</code>, an associated folder inside <code>Sources</code>, and an executable Swift file within that folder called <code>main.swift</code>. You provide the dependencies those functions need inside <code>Package.swift</code>, then import them inside the Swift file itself.</p><p>Note: the executable Swift file must be called <code>main.swift</code> so it can execute top-level calls like <code>try await runtime.run()</code>.</p><p>For example, my <code>ScoreProcessor</code> Lambda function is provided as an executable target that depends on some of my code and four third-party dependencies. The executable target for it looks like this:</p><pre><code class="language-swift">.executableTarget(
	name: "ScoreProcessor",
	dependencies: [
		"Models",
		"SSMUtils",
		.product(name: "AWSLambdaRuntime", package: "swift-aws-lambda-runtime"),
		.product(name: "AWSLambdaEvents", package: "swift-aws-lambda-events"),
		.product(name: "AWSSSM", package: "aws-sdk-swift"),
		.product(name: "AsyncHTTPClient", package: "async-http-client")
	]
)
</code></pre><p>The “Models” and “SSMUtils” dependencies are each code I wrote. The four others that begin with <code>.product(name:)</code> are third-party dependencies that must be defined in your top-level <code>dependencies</code> array within <code>Package.swift</code>.</p><h3>Swift on Lambda</h3><p>Enough configuration talk. Let’s look at some actual Swift code that runs on Lambda.</p><p>Each of the <code>main.swift</code> files have server-side Swift code we could discuss, but <code>ScoreProcessor.swift</code> is an especially useful file to look at as it touches a lot of key Swift on Lambda concepts including event parsing, API requests, interacting with other AWS services, and more.</p><p>At a high level, this function is triggered when new data is written to my <code>Scores</code> table in DynamoDB. It parses the DynamoDB event into my own <code>GameInfo</code> Swift struct, which I can then act on in a type-safe way.</p><p>The top level code for <code>ScoreProcessor.swift</code> looks like this:</p><pre><code class="language-swift">let runtime = LambdaRuntime { (event: DynamoDBEvent, context: LambdaContext) async throws -> Bool in
	context.logger.info("Received DynamoDB event: \(event)")

	for event in event.records {
		guard let gameInfo: GameInfo = parseDynamoEventIntoGameItem(event: event, context: context) else { continue }

		if isFootballGame(game: gameInfo.currentGame) {
			if myTeamScored(gameInfo) {
				try await flashLightsAppropriateColors(gameInfo: gameInfo, context: context)
			}
		}

		if myTeamWon(gameInfo) {
			try await flashLightsAppropriateColors(gameInfo: gameInfo, context: context)
		}
	}

	return true
}

try await runtime.run()
</code></pre><p>Let’s talk about the five key interactions that happen within that abstracted code:</p><ol><li>Using the Swift AWS Lambda runtime</li><li>Event parsing</li><li>API PUT requests</li><li>Swift Concurrency</li><li>Interacting with other AWS services</li></ol><br />
<p>First, using the <strong>Swift AWS Lambda Runtime</strong>.</p><p>The <a href="https://github.com/swift-server/swift-aws-lambda-runtime">Swift AWS Lambda Runtime</a> is defined as “an implementation of the <a href="https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html">AWS Lambda Runtime API</a> and uses an embedded asynchronous HTTP Client based on <a href="http://github.com/apple/swift-nio">SwiftNIO</a> that is fine-tuned for performance in the AWS Runtime context.” More on that asynchronous HTTP Client in a bit.</p><p>The runtime runs a Lambda function’s handler method when the function is invoked. It starts with <code>let runtime = LambdaRuntime { }</code>, and all of your code is included in those brackets. This is how you configure reacting to certain <a href="https://github.com/swift-server/swift-aws-lambda-events">Lambda events</a> and access information from Lambda’s context object like the function ARN, the log group it will write logs to, the function’s memory limit, and more.</p><p>Lambda executes your code inside its run loop when you call <code>try await runtime.run()</code>. Reminder: you can see all of this with more context in the code block above.</p><br />
<p>Now that we have code Lambda can execute, let’s discuss <strong>event parsing</strong>.</p><p>This happens within the <code>parseDynamoEventIntoGameItem()</code> function.</p><p>We can use Swift’s <code>guard case</code> pattern matching to safely extract values from the DynamoDB records (<code>newImage</code> and <code>oldImage</code>) like this:</p><pre><code class="language-swift">guard case .string(let gameId) = newImage["gameId"],
	  case .string(let sport) = newImage["sport"],
	  case .string(let myTeam) = newImage["myTeam"],
	  case .number(let myTeamScore) = newImage["myTeamScore"],
	  case .number(let previousMyTeamScore) = oldImage["myTeamScore"],
	  case .string(let opposingTeam) = newImage["opposingTeam"],
	  case .number(let opposingTeamScore) = newImage["opposingTeamScore"],
	  case .string(let previousGamePeriod) = oldImage["gamePeriod"],
	  case .string(let gamePeriod) = newImage["gamePeriod"] else {
	context.logger.error("Missing or invalid attributes in DynamoDB record")
	return nil
}
</code></pre><p>Swift’s pattern matching here makes event parsing pretty straightforward.</p><p>Numbers are sent across the network to/from DynamoDB as strings, so we still have to convert the number values to <code>Int</code> via <code>Int(myTeamScore)</code>, but once you have those it’s easy to take the values and store them in your own Swift struct or similar - which is what I do with my <code>GameItem</code> and <code>GameInfo</code> structs.</p><br />
<p>Next, <strong>API PUT requests</strong>.</p><p>Once I have my <code>GameItem</code> and <code>GameInfo</code> structs, I know whether my team scored, if the game is over, and whether my team won. Given that information, I need to make my Philips Hue light bulbs flash different colors. To do that from a cloud environment, you need to use Philips Hue’s <a href="https://developers.meethue.com/develop/hue-api/remote-api-quick-start-guide/">Remote API</a>, which is a somewhat involved process that is not well documented. I found <a href="https://gotoguy.blog/2020/05/21/remote-authentication-and-controlling-philips-hue-api-using-postman/">this guide</a> very helpful. I left a comment on it fixing one bit which was outdated.</p><p>For iOS apps, we’d reach for <a href="https://developer.apple.com/documentation/foundation/urlsession">URLSession</a> to make our API requests. But because URLSession relies on Apple platforms, and Lambda runs a variant of Linux, we have to use something else to make our API requests. The preferred mechanism is <a href="https://github.com/swift-server/async-http-client">async-http-client</a> from <a href="https://github.com/swift-server">swift-server</a>. It’s built on top of SwiftNIO, Apple’s asynchronous network application framework.</p><p>To make a PUT request with <code>async-http-client</code>, you need to create the request with the <code>HTTPClientRequest</code> struct, define the HTTP method, add any necessary headers, add the request body, and execute the request with <code>await HTTPClient.shared.execute(request)</code>.</p><p>In my project, that looks like this:</p><pre><code class="language-swift">let hueBody = buildHueBody(for: color)
let url = "https://api.meethue.com/bridge/\(hueUsername)/lights/\(lightNumber)/state"

var request = HTTPClientRequest(url: url)
request.method = .PUT
request.headers.add(name: "Content-Type", value: "application/json; charset=utf-8")
request.headers.add(name: "Authorization", value: "Bearer \(hueAccessToken)")

do {
	let jsonData = try JSONSerialization.data(withJSONObject: hueBody)
	var buffer = ByteBuffer()
	buffer.writeBytes(jsonData)
	request.body = .bytes(buffer)

	let response = try await HTTPClient.shared.execute(request, timeout: .seconds(30))
} catch {
	context.logger.error("Error updating light \(lightNumber): \(error)")
}
</code></pre><p>When adding the request body, you’ll notice that I created something called a <code>ByteBuffer</code>. That’s a struct from SwiftNIO defined as something that “stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or more bytes (octets)”. Whew. Let’s break that down briefly.</p><p>The <code>jsonData</code> we serialize our <code>hueBody</code> into is of type <code>Data</code>, which is raw binary data. We need to write that binary data to a buffer before we can attach it to our request body. That’s what <code>ByteBuffer</code> does for us here. It takes our binary data and writes it to a buffer which we can then use as the request body and send over the network.</p><br />
<p>Hue’s API unfortunately only allows for controlling one light at a time, and this is where <strong>Swift Concurrency</strong> comes in. Using <a href="https://developer.apple.com/documentation/swift/taskgroup">TaskGroup</a> or <a href="https://www.hackingwithswift.com/quick-start/concurrency/how-to-call-an-async-function-using-async-let">async let</a>, we can easily and safely fire off multiple API requests in parallel (one for each light we need to control) and wait for them all to complete before returning from our Lambda.</p><p>While the <code>async let</code> syntax is simpler for sure, I used TaskGroup for this. I find TaskGroup’s behavior more predictable. That’s just personal preference.</p><br />
<p>Finally, the eagle-eyed among you may have noticed there was a <code>hueUsername</code> and a <code>hueAccessToken</code> used in the API request code above. Those are parameters stored securely within AWS’s <a href="https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html">Parameter Store</a>. What does it look like to get those out of the Parameter Store at runtime? This is a good example of <strong>interacting with other AWS services</strong>.</p><p>To get my Hue API access token out of the param store, I wrote a utility function called <code>getSSMParameterValue</code>.</p><p>That function depends on the <code>AWSSSM</code> library from <a href="https://github.com/awslabs/aws-sdk-swift">aws-sdk-swift</a> and gets the parameter specified like this:</p><pre><code class="language-swift">func getSSMParameterValue(parameterName: String, context: LambdaContext) async throws -> String? {
	let config = try await SSMClient.SSMClientConfiguration(region: "us-east-1")
	let ssmClient = SSMClient(config: config)
	let input = GetParameterInput(name: parameterName)

	do {
		let response = try await ssmClient.getParameter(input: input)
		guard let parameterValue = response.parameter?.value else {
			context.logger.error("Parameter value for \(input.name ?? "nil") is nil")
			return nil
		}

		context.logger.info("Retrieved parameter value: \(parameterValue)")
		return parameterValue
	} catch {
		context.logger.error("Error fetching parameter \(parameterName): \(error)")
		return nil
	}
}
</code></pre><p>I can then call that function for the parameter I need as follows: <code>let hueAccessToken = try await getSSMParameterValue(parameterName: "hue-access-token", context: context)</code></p><p>Once I have my Hue access token and Hue Remote API username, I can interact with the Hue Remote API however I’d like and have it control my lights here at home.</p><h4>Code Wrap-up</h4><p>At this point, we’ve covered most of the core concepts you need to wrap your head around how this project works and why it’s set up the way it is. It works well, the code is pretty straightforward, it deploys to and can be removed from AWS with a single command, and it’s easy to maintain. Let’s move on from the nitty-gritty and into some different areas. Specifically cost and performance.</p><h3>Cost</h3><p>I’ve had this system running 24/7 since the end of January. Every ten seconds, it polls two different APIs to check score updates for my favorite teams. If it finds scores for my teams, it writes those scores to DynamoDB, which triggers my <code>ScoreProcessor</code> function to flash my lights accordingly.</p><p>The core system requires an EventBridge cron job that schedules SQS messages, an SQS queue that triggers my poller function every 10 seconds, a DynamoDB table to hold the scores the poller function retrieves, and a processor function that runs if scores change.</p><p>All of that code and the infrastructure running it costs <strong>less than 20 cents per month</strong> to run on AWS. Essentially all of the cost is from DynamoDB, which I could be smarter about to save money if I cared about 20 cents per month.</p><p><img src="https://www.ryantoken.com/images/serverless-swift/cost-breakdown.png" alt="Serverless Swift cost breakdown" class="img-fluid"></p><p>Further, because this is fully serverless, it will scale to zero for a large chunk of the year. The first step of my job scheduler function is to check whether it’s currently football or basketball season, and, if it’s not, return immediately and don’t trigger the rest of the flow. At that point, the system will automatically scale down to $0/month without me doing anything whatsoever.</p><p>The beauty of serverless!</p><h3>Performance</h3><p>To evaluate performance, let’s look at both my API poller function which runs every 10 seconds, and my score processor which is triggered much less often - it only runs if there is a change to one of my favorite teams’ scores. Both of these functions call other APIs, so their total run time is dependent on the response times of those APIs as well.</p><p>I don’t have any broader monitoring set up for this project, but <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html">CloudWatch</a> <strong>does</strong> provide cold start times via the “Report” section of each invocation. We’ll default to looking at the three most recent log streams for each function and average out both the total durations and cold start times of each.</p><p>Each log stream contains one cold start (its first invocation), and then each subsequent invocation inside the stream is from an already-warm container - so there are no cold starts after the first invocation in every log stream. Therefore, we’ll look at the duration and cold starts of just the first invocation of each log stream, which theoretically should have the <strong>worst</strong> performance of any of the invocations in the stream.</p><p><strong>API poller function</strong>:</p><ol><li>Duration 649.85 ms, cold start 194.40 ms</li><li>Duration 713.07 ms, cold start 197.26 ms</li><li>Duration 766.10 ms, cold start 204.21 ms</li></ol><p>Average run duration: 709.67 ms</p><p>Average cold start time: 198.62 ms</p><p>Most of the run duration here is waiting to hear back from the ncaa-api and the public-espn-api. The processing time once we get that data is negligible.</p><p>And look at the sub-200 ms cold start time! This is in a Lambda function that imports five large third-party dependencies, Apple’s Foundation library, and two of my own dependencies. The unzipped executable it produces is 143.7 MB. Hitting under 200 ms to warm up a code package that large is noteworthy.</p><p><strong>Score processor function</strong>:</p><ol><li>Duration 14496.34 ms (lights were triggered), cold start 192.10 ms</li><li>Duration 28.98 ms (no light trigger), cold start 204.72 ms</li><li>Duration 36.15 ms (no light trigger), cold start 208.71 ms</li></ol><p>Average run duration: 4853.82 ms</p><p>Average cold start time: 201.84 ms</p><p>The average run duration here is massively skewed by the first invocation, which triggered the flow that makes my lights go crazy. When that happens, my lights change colors 13 times with half-second delays after each change. Because Hue only supports changing one light per API request I have to make 4 API requests in parallel for each of those 13 color change requests so it can change all four of the lamps in the room I care about. Waiting for all of that to complete is what causes the long run time.</p><p>There’s a similar story on the cold start times here. Just above 200 ms on average for an unzipped executable that comes in at 154.5 MB due to five more large third-party dependencies, Apple’s Foundation library, and some more of my code.</p><p>Let me reiterate that those cold starts hardly ever come into play. Most invocations don’t have <strong>any</strong> cold start period, as Lambda reuses already-warmed containers very often. The speeds reported here are the worst-case speeds when a fresh Lambda container needs to be spun up, the code loaded into memory, etc.</p><p>Given that I haven’t done any work at all to try and slim things down, I’m quite happy with 200 ms cold starts in these cases. This is just from the raw code I’m deploying to Lambda from Swift Cloud with no real consideration for optimization or efficiency. Not bad.</p><h2>Source Code</h2><p>And that about covers it! The full repository, including everything discussed in this post and much more, is on <a href="https://github.com/r-token/sports-home-automation-swift">GitHub</a>.</p><p>Here’s the raw URL: <a href="https://github.com/r-token/sports-home-automation-swift">https://github.com/r-token/sports-home-automation-swift</a></p><p>If you’ve gotten something out of this post, please give the repo a star!</p><h2>Shout-Out to Andrew from Swift Cloud</h2><p>I want to take a moment and give a huge shout-out to <a href="https://github.com/AndrewBarba">Andrew Barba</a>. He created and maintains <a href="https://github.com/swift-cloud/swift-cloud">Swift Cloud</a>, and provided a ton of help in the <a href="https://join.slack.com/t/swift-cloud-app/shared_invite/zt-30fd6v3xv-kjuiPHowF8Oio2M9nA1cVQ">Swift Cloud Slack</a> while I was working on this project.</p><p>It’s a fantastic tool, and Andrew was quick to respond to feedback and gave help when I needed it. If you’re interested in running Swift on AWS, I’d start with Swift Cloud.</p><h2>Thank You</h2><p>If you made it this far, thank you for reading! I know it was a long one.</p><p>I had such a blast creating this project and writing this post. It combines two of my favorite things: serverless back-end systems and the Swift programming language.</p><p>I love talking about this stuff. If you want to chat, feel free to reach out over <a href="mailto:ryantoken13@gmail.com">email</a>, <a href="https://bsky.app/profile/ryantoken.com">Bluesky</a>, <a href="https://indieweb.social/@ryantoken">Mastodon</a>, <a href="https://x.com/_ryantoken">X</a>, or <a href="https://linkedin.com/in/ryantoken">LinkedIn</a>.</p><p>And if you particularly enjoyed this post, you can <a href="https://www.buymeacoffee.com/ryantoken">buy me a coffee</a>!</p><p><a href="https://www.buymeacoffee.com/ryantoken"><img src="https://www.ryantoken.com/images/bmc-button.png" class="img-fluid w-50"></a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.ryantoken.com/blog/catchup-v3</guid><title>CatchUp v3</title><link>https://www.ryantoken.com/blog/catchup-v3</link><description><![CDATA[I first launched CatchUp - Keep in Touch for iOS in May 2018. It was the first app I’d ever released and it was, from a code perspective, objectively pretty bad.]]></description><pubDate>Wed, 03 Apr 2024 12:00:00 +0000</pubDate><dc:creator><![CDATA[Ryan Token]]></dc:creator><category><![CDATA[swiftui]]></category><category><![CDATA[swiftdata]]></category><category><![CDATA[ios]]></category><content:encoded><![CDATA[<p>I first launched <a href="https://apps.apple.com/us/app/catchup-keep-in-touch/id1358023550">CatchUp - Keep in Touch</a> for iOS in May 2018. It was the first app I’d ever released and it was, from a code perspective, objectively pretty bad.</p><p>It’s now April of 2024 and somehow, despite years of neglect while building <a href="https://apps.apple.com/us/app/hot-local-food/id1621818779">three</a> <a href="https://apps.apple.com/us/app/outrank/id1588983785">other</a> <a href="https://apps.apple.com/us/app/chat-by-storyboard/id1662743814">apps</a>, CatchUp still does relatively well on the App Store.</p><p>CatchUp is like a first child for me. It marked the beginning of a journey that has shaped my life and career. I still love and use the app weekly. It still helps me stay in touch with those that matter most.</p><p>However, due to the aforementioned neglect, it has had obvious bugs and missing features for quite a while. That all changes with CatchUp v3, out today.</p><p>CatchUp v3 is a significant improvement across every corner of the app. The core functionality remains - you can still add your contacts and set recurring reminders to CatchUp with people - but everything around it has changed.</p><p>First, there’s a new auto-updating grid of your next CatchUps. I’ve found this helpful as I plan my week and get a feel for who I should remember to get in touch with. It looks like this:</p><p><img src="https://www.ryantoken.com/images/catchup-v3/next-catchups.jpeg" alt="A screenshot of the Next CatchUps grid" class="img-fluid"></p><p>I’ve also revamped the contact detail screen’s design and removed the “Notification Preference” pop-up sheet entirely. Setting your notification preference for a contact now lives fully within the contact detail screen. There’s no “Save” step anymore either. The app auto-saves your notification preference every time you change it.</p><p>That new contact detail screen looks like this:</p><p><img src="https://www.ryantoken.com/images/catchup-v3/detail-screen.jpeg" alt="A screenshot of the contact detail screen" class="img-fluid"></p><p>All controls for this contact now live inside this single screen. Additionally, there’s a nice new “Next CatchUp” row, which shows the next time you’ll get a notification to CatchUp with this person.</p><h2>Longstanding Feature Requests</h2><p>Those are the primary UI improvements, though there are several more UI tweaks here and there that you might notice.</p><p>The rest of v3’s changes address longstanding feature requests. For example:</p><ul><li>There are now orange unread indicators on the contact rows if it’s time to CatchUp with them</li><li>Pulling down on the home screen fetches the latest contact picture and information for all of your selected contacts<ul><li>Previously you had to delete and re-add the contact to update their information</li></ul></li><li>There is now automatic cloud syncing, so your contacts and notification preferences stay up-to-date across iPhone, iPad, and Mac<ul><li>This involved a fun migration to <a href="https://developer.apple.com/documentation/swiftdata">SwiftData</a>, which dramatically simplified my local storage code</li></ul></li></ul><h2>Still Free with No Ads</h2><p>CatchUp is, and always will be, completely free with no ads. The tiny bits of money I make from this app come from the in-app Tip Jar. This is a passion project that I genuinely find helpful in my day-to-day life. I do not, nor do I have any incentive to, store your data on my servers or use your data in any way.</p><p>I hope that you use the app and find it valuable. If you do, please consider supporting development by leaving a tip in the app. I really do find that motivating. Alternatively, you can <a href="https://www.buymeacoffee.com/ryantoken">buy me a coffee</a>!</p><p><a href="https://www.buymeacoffee.com/ryantoken"><img src="https://www.ryantoken.com/images/bmc-button.png" class="img-fluid w-50"></a></p><h2>Download</h2><p>Thank you for reading, and thank you for your interest in CatchUp - Keep in Touch. Feel free to reach out via <a href="mailto:ryantoken13@gmail.com">email</a> with any questions or comments.</p><p>CatchUp v3 is available on iOS, iPadOS, and macOS. It requires iOS 17. You can download it on the App Store today:</p><p><a href="https://apps.apple.com/us/app/catchup-keep-in-touch/id1358023550" style="display: inline-block; overflow: hidden; border-radius: 13px; width: 250px; height: 125px;"><img src="https://tools.applemediaservices.com/api/badges/download-on-the-app-store/black/en-us?size=250x83&amp;releaseDate=1526515200" alt="Download CatchUp v3 on the App Store" style="border-radius: 13px; width: 250px; height: 83px;"></a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.ryantoken.com/blog/hot-local-food</guid><title>Hot Local Food for iOS</title><link>https://www.ryantoken.com/blog/hot-local-food</link><description><![CDATA[Think Tinder, but for food, and it already likes you back. Say hello to Hot Local Food. Free, hot, and available on iOS 15 and newer.]]></description><pubDate>Thu, 26 Jan 2023 12:00:00 +0000</pubDate><dc:creator><![CDATA[Ryan Token]]></dc:creator><category><![CDATA[ios]]></category><category><![CDATA[swift]]></category><category><![CDATA[swiftui]]></category><content:encoded><![CDATA[<p>Think Tinder, but for food, and it already likes you back. Say hello to <strong>Hot Local Food</strong>. Free, hot, and available on iOS 15 and newer.</p><h2><em>Find love, then eat it</em></h2><p>Want something to eat or drink but don’t know where to go? Want to explore the local scene nearby or far away? Just want to look at some good pictures of good food? Hot Local Food is there for you.</p><p>With a photo-heavy, Tinder-style swipe interface, an extensive library of restaurants powered by <a href="https://fusion.yelp.com/">Yelp</a>, and slick features built on top, Hot Local Food will help you find exactly what you need.</p><p><img src="https://www.ryantoken.com/images/hot-local-food/hlf-primary-light.png" alt="UI Screenshots for Hot Local Food" class="img-fluid"></p><p>Features:</p><ul><li>High-quality photos of each location (powered by Yelp)</li><li>Filter places by category, price, and location</li><li>Save places for later by adding them to a custom list</li><li>Quick shortcuts to make reservations (<a href="https://www.opentable.com/" target="_blank" rel="noreferrer">OpenTable</a>), order delivery or pickup (<a href="https://www.doordash.com/" target="_blank" rel="noreferrer">DoorDash</a> and <a href="https://www.ubereats.com" target="_blank" rel="noreferrer">Uber Eats</a>), and find directions (<a href="https://www.apple.com/maps/" target="_blank" rel="noreferrer">Apple Maps</a>)</li><li>Easy access to information about the place, including its phone number, address, hours, and whether or not it’s currently open</li></ul><p>Personally, I’ve gotten the most use out of the location filter.</p><p><img src="https://www.ryantoken.com/images/hot-local-food/hlf-location-light.png" alt="Location Filter screen for Hot Local Food”" class="img-fluid"></p><p>It’s a simple map for v1.0 of the app, and will likely be expanded upon, but the ability to pan around the map to see what’s available in places I’m interested in has been invaluable.</p><p>My wife and I recently moved to Denver. Before moving we used the app to check out fun bars and restaurants close to where we would be living and in the surrounding areas. It was a fun exercise and we’ve repeated it when getting ready to travel for weddings, vacations, and other trips. We also often use it on an average weekday when we want to go out somewhere.</p><p>Building this app has been a labor of love by me and a good friend – Carter Krafft. Carter has been the driver behind the idea and the overall concept, while I’ve done the implementation work and taken some creative liberties with the design. It has been a blast to build, and we hope you get as much out of it as we have.</p><p>Technical notes and privacy:</p><ul><li>100% of Hot Local Food is written in Swift and SwiftUI</li><li>I do not store <em><strong>any</strong></em> of your data on my servers</li><li>I do use iCloud to sync your saved Lists and swipes data between iOS devices</li><li>The free version of the app uses <a href="https://developers.google.com/admob/ios/data-disclosure">Google AdMob</a>, which collects some very basic data - you can pay to remove the ads</li></ul><p><a href="https://apps.apple.com/us/app/hot-local-food/id1621818779?itsct=apps_box_badge&amp;itscg=30200" style="display: inline-block; overflow: hidden; border-radius: 13px; width: 250px; height: 125px;"><img src="https://tools.applemediaservices.com/api/badges/download-on-the-app-store/black/en-us?size=250x83&amp;releaseDate=1674691200" alt="Download on the App Store" style="border-radius: 13px; width: 250px; height: 83px;"></a></p><h2>Personal Notes</h2><p>If you’re still here, hello there! This is just a bit more background on how the app came to be.</p><p>As is tradition, after launching <a href="https://apps.apple.com/us/app/outrank/id1588983785">Outrank for iOS</a> in October of 2021, I moved away from iOS development for a while. This is not new behavior for me. I try to stay active in three areas of software development: iOS, front-end web, and back-end web; but I can only focus on two at a time. I’m always active in back-end web because that’s what I focus on for work, but then I have to choose which one to spend my free time on: front-end web or iOS. So, naturally, once Outrank for iOS was out and stable, it was time to re-up my front-end skills. That led to <a href="https://www.ryantoken.com/blog/nuxt-3-vs-sveltekit">rewriting my website in SvelteKit (and also Nuxt 3?)</a>.</p><p>But iOS came calling again, as it always does. This time in the form of one of my very good friends. Carter and I went to college together and still frequently bounce ideas off one another. One of those ideas was a “Tinder for food” app. The initial idea came at a bar over three years ago when Carter and I, as well as another one of our friends (Matt Rechtien), were talking about app ideas.</p><p>Three years, two app icons, one pandemic, and multiple starts and stops later - we have our app. It’s all SwiftUI, it’s clean and straightforward, it’s not (currently) expensive to run, and it’s ready for the world. I’m so excited about it.</p><p>We’d love it if you tried it out. If you do, and you have feedback - positive or negative - we’d be honored to hear from you. Please <a href="mailto:hotlocalfood@gmail.com?subject=Blog Post Feedback - Hot Local Food">email me</a>.</p><p><a href="https://apps.apple.com/us/app/hot-local-food/id1621818779?itsct=apps_box_badge&amp;itscg=30200" style="display: inline-block; overflow: hidden; border-radius: 13px; width: 250px; height: 125px;"><img src="https://tools.applemediaservices.com/api/badges/download-on-the-app-store/black/en-us?size=250x83&amp;releaseDate=1674691200" alt="Download on the App Store" style="border-radius: 13px; width: 250px; height: 83px;"></a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.ryantoken.com/blog/nuxt-3-vs-sveltekit</guid><title>Nuxt 3 vs SvelteKit</title><link>https://www.ryantoken.com/blog/nuxt-3-vs-sveltekit</link><description><![CDATA[I’ve been thinking for several months about rebuilding my website (again). There were several reasons. First, to dig back into front-end work and re-familiarize myself with that world. Next, to get up to speed with the latest JavaScript framework options and how they worked. And finally, my previous website was no longer cutting it for me in several different ways.]]></description><pubDate>Mon, 24 Oct 2022 12:00:00 +0000</pubDate><dc:creator><![CDATA[Ryan Token]]></dc:creator><category><![CDATA[web]]></category><category><![CDATA[jamstack]]></category><category><![CDATA[rewrite]]></category><content:encoded><![CDATA[<p>I’ve been thinking for several months about rebuilding my website (<a href="https://www.ryantoken.com/blog/rebuilding-my-website">again</a>). There were several reasons. First, to dig back into front-end work and re-familiarize myself with that world. Next, to get up to speed with the latest JavaScript framework options and how they worked. And finally, my previous website was no longer cutting it for me in several different ways.</p><p>For reference, here’s what my website looked like before:</p><p><img src="https://www.ryantoken.com/images/nuxt-3-vs-sveltekit/publish-website.png" alt="v2 of ryantoken.com - built with Swift and Publish" class="img-fluid"></p><p>I built that version of the site with <a href="https://www.swift.org">Swift</a> and <a href="https://github.com/johnsundell/publish">Publish</a> - a static site generator for Swift. While a great tool, I needed something more flexible that better aligned with how I feel about web development today. Thus, the rewrite project began.</p><h2>The Debate</h2><p>The <a href="https://twitter.com/_ryantoken/status/1514393045319536650?s=20&t=2XnKuxMtMirv-q0s8RJXbw">primary debate</a> was about which framework I was going to use. After some thought, I landed on two options. Option one was <a href="https://v3.nuxtjs.org/">Nuxt 3</a>: a Vue framework we use at <a href="https://trystoryboard.com">Storyboard</a>. Option two was <a href="https://kit.svelte.dev/">SvelteKit</a>: a new framework I originally heard about due to <a href="https://scotttolinski.com/">Scott Tolinski</a> frequently singing its praises on the <a href="https://syntax.fm/">Syntax</a> podcast. I come from a <a href="https://reactjs.org/">React</a> background, so regardless of my choice it was going to be quite new conceptually and syntactically.</p><p>Additionally, Nuxt 3 and SvelteKit are both <a href="https://prismic.io/blog/javascript-meta-frameworks-ecosystem#meta-framework">meta-frameworks</a>. Nuxt is a meta-framework for <a href="https://vuejs.org/">Vue</a>, and SvelteKit is a meta-framework for <a href="https://svelte.dev/">Svelte</a>. This means that they’re frameworks that provide abstractions on top of other frameworks - primarily to handle the boring/routine stuff for you. Think wiring up page routes, sharing common layouts between pages, handling smooth page transitions, etc. They also generally come with best practices built in like build optimizations, link prefetching, and more. I did have <em>some</em> experience with meta-frameworks like <a href="https://www.gatsbyjs.com/">Gatsby</a>, but not much. And while most of this post will compare the meta-frameworks of Nuxt 3 and SvelteKit, we’ll also get into some of the differences between the core Vue and Svelte frameworks.</p><p>Let me preface the rest of this post by emphasizing that I am not a front-end expert. My full-time job is primarily in <a href="https://serverless.com">serverless</a> back-end development with <a href="https://nodejs.org/en/">node.js</a>. On top of that, most of the front-end framework experience I do have is in React. I’ve played around with Vue before but was completely new to Nuxt, Svelte, and SvelteKit. Because of this, I’m certain I will get some front-end terminology or facts wrong. Please <a href="mailto:ryantoken13@gmail.com">email me</a> with corrections or clarifications if you have them.</p><p>Ok, on to the main event.</p><p>Both Nuxt 3 and SvelteKit offer some similar features out of the box, including:</p><ul><li>Filesystem-based routing</li><li>Route prerendering</li><li>Link prefetching</li><li>Fully static and server-side rendering options</li><li>Single-file components</li><li>Easy integration with <a href="https://tailwindcss.com/">Tailwind</a>, which I knew I wanted to try for this rewrite</li></ul><p>I first <a href="https://twitter.com/_ryantoken/status/1517504062563835904?s=20&t=yyC5y-1gbqkHw8equ9g3Sw">decided</a> to do the rewrite with Nuxt 3. As mentioned, we use Vue and Nuxt at my place of work and I wanted to get my hands dirty with how it actually works. Again, I currently spend most of my time doing back-end development.</p><p>However, Nuxt 3 has now been in Release Candidate mode since April of 2022 (about 6 months at time of writing). It still isn’t done and is missing some key features for me to be fully satisfied with it. After waiting long enough for Nuxt 3 to be fully released, I decided I would <em>also</em> rewrite my website with Svelte and SvelteKit.</p><p>Both of these rewrites have been more-or-less completed and live at different URLs.</p><p>Before spoiling which one I chose, let’s get into my experience with each:</p><h2>Nuxt 3</h2><p>Nuxt 3 is a brand-new framework. It doesn’t have a 1.0 release yet and I’m still waiting on several key features to be released. Primarily <a href="https://github.com/nuxt/image/discussions/548">Nuxt Image support</a> for static sites or sites hosted on Netlify or Vercel, and <a href="https://github.com/nuxt/content/issues/1154">Nuxt Content support</a> for static sites.</p><p>Neither of those issues are complete dealbreakers though. I can 1) not use Nuxt Image, and 2) go with server-side rendering for now instead of a fully static site. That works around both of those issues for the time being.</p><h3>Developer Experience</h3><p>Despite those hurdles, I’ve sincerely enjoyed the developer experience of building with Nuxt 3 and Vue 3.</p><p>Things like this from Nuxt 2:</p><pre><code class="language-js">&lt;script&gt;
export default {
  data() {
    return {
      count: 0
    }
  },
  methods: {
    increment(){
      this.count++
    }
  }
}
&lt;/script&gt;
</code></pre><p>Turn into this with Nuxt 3:</p><pre><code class="language-js">&lt;script setup&gt;
  const count = ref(0)
  const increment = () =&gt; count.value++
&lt;/script&gt;
</code></pre><p>So much nicer. Additionally, one of the primary reasons I wanted to use Nuxt 3 was to take advantage of the <a href="https://content.nuxtjs.org/">Nuxt Content</a> rewrite - which is their content engine and what I use to generate the blog.</p><p>My website is not a complicated one. It’s primarily just a bunch of static pages that include text and images. The only relatively complex parts are the responsive sidebar and the blog. The sidebar could be solved once and considered “done” - it’s not something I should need to revisit often.</p><p>The blog, though, needs to be as simple as possible to maintain and update over time. If blog posts are hard to write, or, once written, hard to connect to the rest of the site, that puts up a large mental roadblock for me to continue writing.</p><h3>The Blog - Nuxt and Nuxt Content</h3><p>Nuxt 3 and Nuxt Content solve the blog problem. All you need to do is create a <code>/content</code> directory at the root of the project, a <code>/blog</code> directory within that, and a new folder for each blog post. You can then write blog posts in standard markdown and include Vue components within that markdown via <a href="https://content.nuxtjs.org/guide/writing/mdc">MDC</a> syntax. Nuxt will automatically configure the routing for you. For example, an <code>index.md</code> markdown file within <code>/content/blog/fancy-blog-post</code> will be accessible at https://your-website.com/blog/fancy-blog-post. Pretty sweet!</p><h3>MDC Syntax</h3><p>I did find the MDC syntax a bit annoying, though. Again, this is the syntax used to include Vue components in the markdown itself. For instance, I have a custom Vue component for showing a responsive/resizable image. To include that in a blog post with Nuxt Content and MDC, it looks like this:</p><pre><code class="language-js">::ResizableBlogImage{src="https://www.ryantoken.com/path/to-image.png" altText="Some alt text"}
::
</code></pre><p>The double-colon syntax felt weird to me. Maybe that’s common in parts of Vue that I’m not familiar with, but it’s much different from how you use components in standard Vue files.</p><p>The previous example was for a “block” component, something that isn’t inlined with the rest of the markdown. You can also use Vue components inline via MDC, but I ran into another oddity there. If I wanted punctuation immediately after the inline component, it broke! The MDC syntax itself would render in the blog post instead of the actual component.</p><p>The only way I found to get around this was to include the punctuation within the component’s props, like so:</p><pre><code class="language-js">:ExternalBlogLink{url="https://url-to-go-to.com" text="The text to style with a period at the end."}
</code></pre><p>This component in particular styled the URL a certain way though, so it would also style the ending period that way. Not ideal. That’s how it works in the Nuxt version of the site today. If this issue has since been fixed, please let me know!</p><p><strong>Edit</strong>: <a href="https://twitter.com/manutopik/status/1584906534408130562?s=20&t=NG2MIaY9tREYnsNubMl7nw">@manutopik</a> informed me on Twitter that “standard” component syntax works as well! So this is also appropriate MDC syntax:</p><pre><code class="language-js">&lt;ResizableBlogImage src="https://www.ryantoken.com/path/to-image.png" altText="Some alt text"&gt;&lt;/ResizableBlogImage&gt;
</code></pre><p>Additionally, Sébastien Chopin, the author of Nuxt, <a href="https://twitter.com/Atinux/status/1584928666748096513?s=20&t=NG2MIaY9tREYnsNubMl7nw">let me know on Twitter</a> that the inline component issue with punctuation should be fixed very soon.</p><h3>Other - Nuxt</h3><p>That covers the key components of what differentiated Nuxt for me. The developer experience was largely wonderful, and Nuxt Content gave me an easy way to hook up blog posts to the rest of the site.</p><p>There were several other benefits of Nuxt that I found useful while doing the rewrite as well. I’ll list a few of them here:</p><ol><li>Vue 3 and the <a href="https://vuejs.org/guide/extras/composition-api-faq.html#why-composition-api">Composition API</a> were fantastic to work with. Composition utilities like <a href="https://vueuse.org/core/useFetch/">useFetch</a> saved me considerable time and removed plenty of unnecessary boilerplate.</li><li>The extremely fast development feedback loop powered by <a href="https://vitejs.dev/">Vite</a> and <a href="https://nitro.unjs.io/">Nitro</a>.</li><li>Just using Vue in general compared to my previous experiences with React. Vue felt easier to pick up and lighter weight than React, while giving me more than enough functionality for what my website needs.</li></ol><h2>Svelte and SvelteKit</h2><p>While Vue is conceptually similar to React in many ways, Svelte is largely not. Svelte does still have the concept of components, reactivity, lifecycle hooks, etc… like React & Vue do, but Svelte is very different in <em>how</em> it accomplishes some of those things.</p><p>For example, React and Vue both use what’s called the “<a href="https://reactjs.org/docs/faq-internals.html">virtual DOM</a>” for updating the actual DOM whenever the application’s state changes. This is a bit of <a href="https://svelte.dev/blog/virtual-dom-is-pure-overhead">overhead</a> to simplify the development experience for the user.</p><p>Svelte rejects the entire idea of the virtual DOM and extra state management libraries.</p><p>> Unlike traditional UI frameworks, Svelte is a compiler that knows at build time how things could change in your app, rather than waiting to do the work at run time.</p><p><em>– <a href="https://svelte.dev/blog/virtual-dom-is-pure-overhead">svelte.dev</a></em></p><p>In the end, this means that Svelte can achieve a similar declarative, state-driven UI development style without the overhead of the virtual DOM. That is the primary benefit here, and it results in some very fast (and concise) code.</p><p>Svelte itself is the compiler that handles the reactivity components at build time. You can learn the basics of Svelte through their excellent <a href="https://svelte.dev/tutorial/basics">code-along tutorial</a>.</p><p>SvelteKit is to Svelte as Nuxt is to Vue, or as Next.js is to React. A “meta-framework” as I mentioned earlier. It gives us filesystem-based routing, link prefetching, and plenty more.</p><p>Let’s look at some of the items we mentioned in the Nuxt 3 section and how they’re implemented in SvelteKit.</p><h3>The Blog - SvelteKit and mdsvex</h3><p>We can get automatic blog post routing with SvelteKit by just using their standard filesystem-based routing and a dynamic route. We can simply create a directory structure at <code>/src/routes/blog</code> and drop all of our markdown files inside the <code>/blog</code> folder.</p><p>This won’t work right away, though, because every route on a SvelteKit site needs a <code>+page.svelte</code> file. We want our markdown files to serve as this <code>+page.svelte</code> file though, and that’s where SvelteKit’s <a href="https://kit.svelte.dev/docs/routing">dynamic routes</a> come into play. We create a <code>[slug]</code> folder (brackets included) within the <code>/blog</code> folder and we put both a <code>+page.svelte</code> file and a <code>+page.js</code> file in there. This allows us to use Svelte’s built-in <code>load</code> function within <code>+page.js</code> and dynamically load the data that a given blog post will need. We can then display it in <code>+page.svelte</code>.</p><p>I know that’s a lot of Svelte-specific info. If you want to get deeper into the weeds on how this works and how to set up a SvelteKit blog yourself, check out <a href="https://joshcollinsworth.com/blog/build-static-sveltekit-markdown-blog">Josh Collinsworth’s SvelteKit tutorial</a>. And <a href="https://ko-fi.com/collinsworth">tip him a few bucks</a> while you’re at it for the fantastic content. I sure did.</p><p>Regardless, that gives us a dead-simple way to add posts to our blog. All I have to do going forward is create a new <code>post-title.md</code> markdown file within the <code>/blog</code> folder and I automatically get a new blog post live on the site. Perfect.</p><h3>mdsvex</h3><p>Svelte’s counterpart to Nuxt’s MDC syntax is called <a href="https://mdsvex.com/">mdsvex</a>. An odd name for sure, but it’s supposed to be the svelte-y naming equivalent of the popular <a href="https://mdxjs.com/">MDX</a> syntax for React. <code>MD</code> and <code>X</code> to represent dynamic markdown, plus <code>SVE</code> in the middle for Svelte, equals mdsvex 🤷‍♂️</p><p>Additionally, mdsvex is <strong>not</strong> an officially sanctioned, first-party “components-in-markdown” preprocessor like MDC is for Nuxt. It’s an <a href="https://github.com/pngwn/mdsvex">open-source third-party library</a>. Despite it not being a first-party piece of technology, I found it simpler and easier to use than MDC in Nuxt. You can see some side-by-side comparisons in the <em>Comparing Nuxt 3 and SvelteKit</em> section below.</p><p>Here’s how you use components in markdown with mdsvex:</p><pre><code class="language-js">&lt;ResizableImage src="https://www.ryantoken.com/path/to-image.png" altText="Some alt text" /&gt;
</code></pre><p>Look at that! So straightforward. You use it just like every other Svelte component in any other Svelte file.</p><p>And it’s the same for inline components. No weird asterisks around how to handle punctuation or special symbols immediately after you use the component. It just works.</p><h3>Other - SvelteKit</h3><p>I’ve already discussed most of the primary benefits I found when using Svelte and SvelteKit, as well as discussed how I implemented the blog in this version of the site. But several other SvelteKit niceties deserve a callout before moving on:</p><ol><li>Like Nuxt 3, the developer experience was great and the development feedback loop was extremely fast. SvelteKit also uses Vite but comes bundled with a <a href="https://github.com/sveltejs/vite-plugin-svelte">Svelte plugin for Vite</a> and <a href="https://github.com/sveltejs/vite-plugin-svelte/blob/main/docs/config.md#hot">Hot Module Replacement (HMR)</a> to reflect changes to your code in the browser immediately.</li><li>Svelte itself was surprisingly easy to learn. I mentioned the <a href="https://svelte.dev/tutorial/basics">tutorial</a> already, but it really is very simple to get a hang of while you work through that. It’s a clean and simple framework.</li><li>Due to its smaller size, no virtual DOM, optimizing at build-time rather than run-time, and no need for extra state management code, Svelte is arguably <a href="https://procoders.tech/blog/svelte-vs-vue-frameworks-comparison/">the fastest</a> JavaScript framework on the market today</li></ol><h2>Comparing Nuxt 3 and SvelteKit</h2><p>Ok, enough on my experience with each. Let’s get into some hands-on comparisons between how they performed when actually building this website. I’ll start with a couple of component comparisons before getting into total page sizes, load speeds, and total lines of code.</p><h3>Component Comparisons</h3><h4>Topbar Component</h4><p>A good first component to look at for comparison’s sake is the Topbar component. The Topbar only appears on small screens/mobile phones, but it interacts with the Sidebar in an interesting way.</p><p>When you tap the sidebar icon, it needs to send some kind of notification to the Sidebar component to let it know that it should open/close itself.</p><p>Here’s what the Topbar looks like:</p><p><img src="https://www.ryantoken.com/images/nuxt-3-vs-sveltekit/topbarComponent.png" alt="The Topbar component" class="img-fluid"></p><p>Here’s a simplified implementation of the Topbar component in Vue 3:</p><p><em>Topbar.vue</em></p><pre><code class="language-js">&lt;script setup&gt;
  import IconShowSidebar from '~icons/zondicons/show-sidebar'
  
  const emit = defineEmits(["toggleSidebar", "updateSelectedPageFromTopbar"])
  const toggleSidebar = () =&gt; emit("toggleSidebar", true)
  const updateSelectedPage = () =&gt; emit("updateSelectedPageFromTopbar", "index")
&lt;/script&gt;

&lt;Template&gt;
  &lt;div&gt;
    &lt;button 
      @click='toggleSidebar'
      type="button" 
      value="Open sidebar"
    &gt;
      &lt;icon-show-sidebar /&gt;
    &lt;/button&gt;

    &lt;NuxtLink to="/" @click="updateSelectedPage"&gt;Ryan Token&lt;/NuxtLink&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre><p>And here it is in Svelte:</p><p><em>Topbar.svelte</em></p><pre><code class="language-js">&lt;script&gt;
  import { SidebarIcon } from 'svelte-feather-icons'
  export let open
  export let currentPage
  
  const toggleSidebar = () =&gt; open = true
  const updateSelectedPage = () =&gt; currentPage = 'index'
&lt;/script&gt;

&lt;div&gt;
  &lt;button 
    on:click={toggleSidebar}
    type="button"
    value="Open sidebar"
  &gt;
    &lt;SidebarIcon /&gt;
  &lt;/button&gt;

  &lt;a href="/" on:click={updateSelectedPage}&gt;Ryan Token&lt;/a&gt;
&lt;/div&gt;
</code></pre><p>The Topbar component and the Sidebar component are rendered at the same level in the component hierarchy - one is not a child of the other. However, the Sidebar needs to react to changes in the Topbar’s state. As mentioned, when a user taps the “toggle sidebar” icon in the Topbar, it should open/close the Sidebar.</p><p>For reference, here’s a simplified version of the parent component that renders both the Sidebar and the Topbar:</p><pre><code class="language-js">&lt;script&gt;
  import Sidebar from '$lib/components/Sidebar.svelte'
  import Topbar from '$lib/components/Topbar.svelte'
  export let data

  let sidebarOpened = false
  let currentPage = $page.url.pathname
&lt;/script&gt;

&lt;div&gt;
  &lt;Sidebar openedStatus={sidebarOpened} currentPage={currentPage} /&gt;
  &lt;div&gt;
    &lt;Topbar sidebarOpen={sidebarOpened} currentPage={currentPage} /&gt;
    &lt;main&gt;
      &lt;slot /&gt;
    &lt;/main&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre><p>A change in the Topbar’s <code>sidebarOpen</code> state needs to be bubbled up to its parent component, then forwarded on to the Sidebar component so the Sidebar knows whether it should open itself, close itself, or do nothing.</p><p>Props are typically sent <em>from</em> a parent component <em>to</em> a child component. Sending prop data changes back up the hierarchy from a child to a parent is always more complicated. Vue and Svelte both have ways of handling this, but they do it very differently.</p><p>Vue uses the concept of <a href="https://vuejs.org/guide/components/events.html#emitting-and-listening-to-events">emits</a> to send messages from a child to its parent.</p><p>Svelte uses <a href="https://svelte.dev/repl/e6f91174592d45c78f4701b2d311b62e?version=3.29.4">two-way data bindings</a> instead. In the parent component, I can pass the value of the Topbar’s <code>open</code> prop to the Sidebar with the <code>bind</code> keyword like so: <code>&lt;Sidebar bind:open={sidebarOpened} /&gt;</code></p><p>Personally, I found Svelte’s approach to be more straightforward than needing to <code>emit</code> an event and then set up an event listener that reacts to that. Neither approach was overly complex, but Svelte’s felt more natural to me.</p><h4>BlogPreview Component</h4><p>Let’s look at one more component comparison before moving on.</p><p>The BlogPreview component is the responsive card that shows each blog post’s primary image, title, description, publish date, and tags. Here’s how it looks:</p><p><img src="https://www.ryantoken.com/images/nuxt-3-vs-sveltekit/blogPreviewComponent.png" alt="The BlogPreview component" class="img-fluid"></p><p>Here’s a simplified implementation of it in Vue 3:</p><pre><code class="language-js">&lt;script setup&gt;
  const props = defineProps({
    slug: String,
    title: String,
    description: String,
    date: String,
    image: String,
    imageAlt: String,
    tags: Array
  })
  
  function navigate(path){
    return navigateTo({
      path: path
    })
  }

  const formattedDate = computed(() =&gt; {
    const isoDate = props.date
    const dateString = new Date(isoDate.replace(/-/g, '\/').replace(/T.+/, ''))
    const conciseDate = dateString.toLocaleDateString()
    return conciseDate
  })
&lt;/script&gt;

&lt;template&gt;
  &lt;div&gt;
    &lt;div @click="navigate(slug)"&gt;
      &lt;div&gt;
        &lt;div&gt;
          &lt;img :src="image" :alt="imageAlt" /&gt;
        &lt;/div&gt;

        &lt;div&gt;
          &lt;p&gt;{{ title }}&lt;/p&gt;
          &lt;p&gt;{{ description }}&lt;/p&gt;
          &lt;p&gt;{{ formattedDate }}&lt;/p&gt;
          &lt;div&gt;
            &lt;div v-for="tag in tags" :key="tag"&gt;
              &lt;NuxtLink :to="'/tags/' + tag" @click.stop="navigate(`/tags/${tag}`)"&gt;
                {{ tag }}
              &lt;/NuxtLink&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/template&gt;
</code></pre><p>And here’s how it looks in Svelte:</p><pre><code class="language-js">&lt;script&gt;
  import { goto } from '$app/navigation'
  export let slug, title, description, date, image, imageAlt, tags

  const formattedDate = () =&gt; {
    const isoDate = date
    const dateString = new Date(isoDate.replace(/-/g, '\/').replace(/T.+/, ''))
    const conciseDate = dateString.toLocaleDateString()
    return conciseDate
  }
&lt;/script&gt;

&lt;div&gt;
  &lt;div on:click={() =&gt; goto(slug)}&gt;
    &lt;div&gt;
      &lt;div&gt;
        &lt;img src={image} alt={imageAlt} loading="lazy" decoding="async" /&gt;
      &lt;/div&gt;

      &lt;div&gt;
        &lt;p&gt;{ title }&lt;/p&gt;
        &lt;p&gt;{ description }&lt;/p&gt;
        &lt;p&gt;{ formattedDate() }&lt;/p&gt;
        &lt;div&gt;
          {#each tags as tag (tag)}
            &lt;div&gt;
              &lt;a href="https://www.ryantoken.com/blog/tags/%7Btag%7D"&gt;
                { tag }
              &lt;/a&gt;
            &lt;/div&gt;
          {/each}
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre><p>The main difference to outline here is how each framework handles a <code>for-each</code> loop within the HTML. For this component, we want to loop through an array of tags. For each tag in the array, we need to render out the name of the tag and a link to it.</p><p>Vue 3 (what Nuxt uses) does this with the <a href="https://vuejs.org/guide/essentials/list.html">v-for</a> directive.</p><p>Svelte uses an <a href="https://svelte.dev/tutorial/each-blocks">#each</a> block around the <code>div</code> that should be repeated.</p><p>Both are relatively nice and concise. I don’t have a strong preference between the two here. However, the Svelte component is 13 lines shorter than its Vue counterpart.</p><h3>MDC vs mdsvex</h3><p>I mentioned my preference for Svelte’s mdsvex to Nuxt’s MDC syntax earlier, but I want to give a side-by-side comparison here so it’s easier to understand why. Again, these are the libraries that allow you to use Vue or Svelte components within Markdown.</p><p>Here’s how you use a block component, like a resizable image, with Vue and MDC:</p><pre><code class="language-js">::ResizableBlogImage{src="https://www.ryantoken.com/path/to-image.png" altText="Some alt text"}
::
</code></pre><p>And here’s how you do the same thing with Svelte and mdsvex:</p><pre><code class="language-js">&lt;ResizableImage src="https://www.ryantoken.com/path/to-image.png" altText="Some alt text" /&gt;
</code></pre><p>Again, neither are <em>bad</em>, but one of them makes more sense and is more concise. And that, to me, is the Svelte solution.</p><h3>Page Size Comparisons</h3><p>So we’ve talked now for a while about conceptual differences, syntactic differences, and developer experience differences between the frameworks, but what about real-world speed and size comparisons?</p><p>Let’s start with size.</p><p>To gauge a page’s size, I’m using Chrome’s standard Developer Tools and the Network tab. Doing a hard refresh of the home page of my site, I see the following:</p><p><strong>Nuxt 3 site</strong>:</p><ul><li>45 requests</li><li>942 kB transferred</li><li>2.0 MB resources</li></ul><p><strong>SvelteKit site</strong>:</p><ul><li>37 requests</li><li>627 kB transferred</li><li>1.6 MB resources</li></ul><p>The SvelteKit site is smaller in every way despite being a nearly identical website. Plus one for SvelteKit.</p><p>Additionally, Svelte, as its name implies, is simply a small framework. This is primarily because there’s no virtual DOM or extra state management libraries that Svelte needs to deal with. This results in a framework that’s smaller in overall size and has less <a href="https://builtin.com/software-engineering-perspectives/fix-javascript-bloat">JavaScript bloat</a>.</p><p>The size difference between the two pages also lends itself to our next point of comparison: speed.</p><h3>Page Speed Comparisons</h3><p>Speed is harder to measure reliably. While the Network tab was consistent and reliable for calculating page size, it showed a significant variance in page load speed on every refresh for both versions of the site.</p><p>To try to put some more concrete numbers around this, we’ll defer to Google’s <a href="https://pagespeed.web.dev/">PageSpeed Insights</a>.</p><p>Note: I have not yet put serious time into optimizing either site for increased performance metrics aside from compressing images.</p><p><strong>Nuxt 3 site - mobile</strong></p><p><img src="https://www.ryantoken.com/images/nuxt-3-vs-sveltekit/nuxt-pagespeed-mobile.png" alt="PageSpeed Insights scores for the Nuxt 3 site on mobile" class="img-fluid"></p><p><strong>Nuxt 3 site - desktop</strong></p><p><img src="https://www.ryantoken.com/images/nuxt-3-vs-sveltekit/nuxt-pagespeed-desktop.png" alt="PageSpeed Insights scores for the Nuxt 3 site on desktop" class="img-fluid"></p><p><strong>SvelteKit site - mobile</strong></p><p><img src="https://www.ryantoken.com/images/nuxt-3-vs-sveltekit/svelte-pagespeed-mobile.png" alt="PageSpeed Insights scores for the SvelteKit site on mobile" class="img-fluid"></p><p><strong>SvelteKit site - desktop</strong></p><p><img src="https://www.ryantoken.com/images/nuxt-3-vs-sveltekit/svelte-pagespeed-desktop.png" alt="PageSpeed Insights scores for the SvelteKit site on desktop" class="img-fluid"></p><p>Some interesting takeaways there. First, they both scored perfect 100s on desktop. Again, I have put almost no time into deeper page optimizations. All I’ve actively done is compressed the image files throughout the site so they’re smaller and quicker to load. To get perfect 100s on desktop effectively out of the box with both of these frameworks is impressive.</p><p>There’s a bigger difference in how they scored for mobile. The Nuxt site performed moderately worse in every metric on mobile than the SvelteKit site. The primary performance drag for both sites was the Apple Podcasts embedded player I include on the home page. PageSpeed Insights complained about that player being slow to load every time. Given that it’s 1) lazily loaded, and 2) at the bottom of the page so you typically need to scroll to see it, I’m not too worried about it.</p><p>There were minor differences every time I ran the PageSpeed Insights process on each site. They were relatively consistent each time though, so I think it’s a fair comparison.</p><h3>Total Lines of Code</h3><p>Before we wrap up, I wanted to share a quick note on total lines of code for each project.</p><p>Total lines of code (counted with <a href="https://github.com/AlDanial/cloc">cloc</a>):</p><ul><li>Nuxt 3 site: 27,939 total lines of code</li></ul><pre><code class="language-markup">-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
JSON                             8              0              0          26092
Vuejs Component                 26            222             59            842
Markdown                        11            500              0            767
JavaScript                       3             17              0             75
YAML                             1              9              0             69
TypeScript                       3              9              3             61
CSS                              1              3              0             21
TOML                             1              2              0             10
Text                             1              0              0              2
-------------------------------------------------------------------------------
SUM:                            55            762             62          27939
-------------------------------------------------------------------------------
</code></pre><ul><li>SvelteKit site: 8,439 total lines of code</li></ul><pre><code class="language-markup">-------------------------------------------------------------------------------
Language                     files          blank        comment           code
-------------------------------------------------------------------------------
JSON                             4              0              0           6463
Svelte                          21            265              3           1001
Markdown                        10            452              0            656
JavaScript                      14             29              3            188
CSS                              2             21              8            119
HTML                             1              0              0             12
-------------------------------------------------------------------------------
SUM:                            52            767             14           8439
-------------------------------------------------------------------------------
</code></pre><p>A monstrous difference. 27,939 lines of code for the Nuxt 3 project, and only 8,439 for the SvelteKit project.</p><p>The major difference here is the amount of JSON. I’m not writing much JSON myself for this website - nearly all of that is coming from the <code>package-lock.json</code> file that manages dependency versions. This means that the Nuxt 3 version has a <em>lot</em> more internal dependencies than the SvelteKit version.</p><p>Doing an <code>npm install</code> from the root of each project reveals that the Nuxt 3 site is using 961 individual packages, while the SvelteKit site is using just 302. That is significant.</p><p>The amount of actual code you write as a developer is relatively similar for each, but SvelteKit having 1/3 of the overhead when compared to Nuxt 3 is very attractive.</p><h2>The Winner (for now)</h2><p><img src="https://www.ryantoken.com/images/nuxt-3-vs-sveltekit/sveltekit-full-res.png" alt="The SvelteKit logo" class="img-fluid"></p><p>You’ve probably already guessed which framework I ended up choosing for the production version of the site.</p><p>I chose SvelteKit, and these were the primary reasons:</p><ol><li>It’s no-nonsense. The syntax is clean, concise, and consistent while using primarily traditional HTML, CSS, and JavaScript. There is some “magic” with SvelteKit, like the filesystem-based routing, but Svelte itself is very self-explanatory</li><li>No virtual DOM diffing or complex state management code</li><li>It’s reactive by default. Vue requires you to explicitly initialize reactive variables, Svelte does not</li><li>It’s extremely fast and performs well on both desktop and mobile out of the box</li><li>I prefer Svelte’s <code>mdsvex</code> to Nuxt’s <code>MDC</code> for components in Markdown. How the blog works is arguably the most important part of the site for me, so this matters a lot</li><li>I prefer Svelte’s two-way binding feature to Vue’s <code>emit</code> feature for bubbling props from child components up to their parents</li></ol><p>Let me be clear, though. Nuxt 3 is an excellent framework. It’s performant, provides a wonderful developer experience, and has a great team behind it and a bright future ahead of it.</p><p>I loved building the website with Nuxt. I was consistently impressed with how intuitive its features were to implement and how quickly I was able to get off the ground. I began this project with Nuxt for a reason.</p><p>The current plan is to maintain both the Nuxt 3 site and the SvelteKit site over time. I may even change which one ryantoken.com points to at various times. Doing this will keep me up-to-date with how each framework is progressing and keep my skillset up on both simultaneously.</p><p><strong>Nuxt 3 site</strong>: <a href="https://ryantoken-v3.vercel.app">https://ryantoken-v3.vercel.app</a></p><p><strong>SvelteKit site</strong>: <a href="/">https://ryantoken.com</a> (you’re on it)</p><p>This was a wonderful exercise to go through, and I’ve never been happier with my personal website. Thanks for reading, and feel free to <a href="mailto:ryantoken13@gmail.com">get in touch</a> if you have feedback on this blog post or the site in general. I’d love to hear from you!</p><p>And if you particularly enjoyed this post, you can <a href="https://www.buymeacoffee.com/ryantoken">buy me a coffee</a>!</p><p><a href="https://www.buymeacoffee.com/ryantoken"><img src="https://www.ryantoken.com/images/bmc-button.png" class="img-fluid w-50"></a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.ryantoken.com/blog/dynamic-ephemeral-storage-lambda</guid><title>Dynamic Lambda Storage</title><link>https://www.ryantoken.com/blog/dynamic-ephemeral-storage-lambda</link><description><![CDATA[I published an article on Storyboard’s Dev Blog about how to configure dynamic amounts of ephemeral storage for a Lambda function on a per-invocation basis.]]></description><pubDate>Fri, 10 Jun 2022 12:00:00 +0000</pubDate><dc:creator><![CDATA[Ryan Token]]></dc:creator><category><![CDATA[web]]></category><category><![CDATA[cloud]]></category><category><![CDATA[serverless]]></category><content:encoded><![CDATA[<p>I published an article on <a href="https://medium.com/storyboard-podcasts/storyboard-dev-blog-serverless-compute-with-dynamic-ephemeral-storage-8fd38c0df93d">Storyboard’s Dev Blog</a> about how to configure dynamic amounts of ephemeral storage for a Lambda function on a <em>per-invocation</em> basis.</p><p>AWS does not let you do this natively. You manually set the amount of storage on the function itself, and then you’re done. You <em>can</em> edit it after the fact, but you can’t change the amount of storage allocated with each invocation.</p><p>In the post, I detail (what I think is) a clever solution to this limitation which can save you a significant amount of money in the long run. Hint: it’s built with the <a href="https://www.serverless.com/framework">Serverless Framework</a>.</p><p>Check out the full post in the link below, and let me know what you think!</p><p>Link to the post: <a href="https://medium.com/storyboard-podcasts/storyboard-dev-blog-serverless-compute-with-dynamic-ephemeral-storage-8fd38c0df93d">https://medium.com/storyboard-podcasts/storyboard-dev-blog-serverless-compute-with-dynamic-ephemeral-storage-8fd38c0df93d</a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.ryantoken.com/blog/one-year-at-storyboard</guid><title>One Year at Storyboard</title><link>https://www.ryantoken.com/blog/one-year-at-storyboard</link><description><![CDATA[This week marks one year since I joined Storyboard.]]></description><pubDate>Fri, 29 Apr 2022 12:00:00 +0000</pubDate><dc:creator><![CDATA[Ryan Token]]></dc:creator><category><![CDATA[career]]></category><category><![CDATA[reflections]]></category><content:encoded><![CDATA[<p>This week marks one year since I joined <a href="https://new.trystoryboard.com">Storyboard</a>.</p><p>From a high level, it looked like a bit of a leap of faith. I left a larger, more “stable” company for an early-stage startup in the middle of a pandemic. From my perspective, though, it was more a necessity than it was a risk. Yes, I was happy at my previous company, but it wasn’t enough. I wanted to be challenged, I wanted to be involved in areas outside of just software, and, most importantly, I wanted out of my comfort zone.</p><p>Storyboard has provided all of this and so much more.</p><p>I’m learning technologies I hadn’t heard of previously; I’m working with the design team, the product team, and even the sales team on features both internal and external; I’m working with developers who know so much more than I do about various aspects of software. It’s a feeling that I lost for a while after several years in my previous role, and I love it.</p><p>Writing this now, I can’t believe it’s already been a full year since I joined the team.</p><p>The company has grown substantially, both in terms of revenue and team size, but we’re careful and sustainable with that growth. See <a href="https://newsletter.pragmaticengineer.com/p/the-scoop-fast">Fast’s recent collapse</a> for some insight into why that’s important.</p><p>My own skillset has seen significant growth over this year as well. With the <em>possible</em> exception of my first year out of college, this is the most I’ve learned in a single year in my career. From creating our serverless architecture, to going deep on WebRTC and Hypercore, to helping with difficult authentication problems, to learning a new front-end framework, it has been a massive year for me.</p><p>These are all areas I’m deeply interested in, but some of them are also areas I did not have much (or any) experience with when I joined the company. I’m convinced that there’s something about joining a scrappy, tenacious startup that rubs off on you. Part of me has always been that way, but it was taken to eleven when I joined Storyboard.</p><p>Storyboard is fully remote. We have no office, we have no central location. I don’t even think we have more than three people living in any given city. We’re remote at our core.</p><p>I knew that coming in, and I had done plenty of remote work the year prior due to Covid-19, but it was still an open question in my mind as to whether I’d enjoy the fully remote life after a full year of it - knowing that there was no office I would eventually be going back to.</p><p>I absolutely love it.</p><p>Also at its core, Storyboard is a communication company. We provide asynchronous communication channels. We facilitate idea sharing even, and especially, when the environment makes that difficult. It’s clear to everyone who works here that this is Storyboard’s heart. We host podcasts with employees, we have regular lunch & learns that we also distribute as podcast episodes, we actively engage in cross-function discourse instead of hoping it happens passively. And the fact that <em>everyone</em> is remote instead of just some of us sets a level playing field.</p><p>It’s a wonderful environment. And while I do occasionally miss seeing my coworkers in person, the benefits gained from being remote-first are clear and obvious to me. I understand not everyone works the same way, but this role and company atmosphere feels like it was made for me.</p><h2>What’s Next</h2><p>An important question I’m asking myself now is how will I keep the momentum going for year two?</p><p>I have a few ideas that are outside the traditional “keep learning” norms:</p><h3>1. Produce more internal content</h3><p>Storyboard is all about podcasting. I run <a href="https://thegoldenhurricast.com/podcast">my own podcast</a> outside of work. While I’ve done my share of episodes internally for Storyboard, there’s plenty of room for me to do more. And I have more to say! I’ve yet to decide whether that be a quick audio journal on what I worked on/learned that day or week, or something else. But more internal content is certainly a priority for me this year.</p><h3>2. Engage in more open-source software development</h3><p>I made my first couple of open-source contributions this past year, but none that I would consider significant. I’ve identified several projects that I love, that impact the work we’re doing at Storyboard, and that have maintainers I’ve either gotten to know or simply respect. The opportunity is there for me to make a meaningful impact in these projects.</p><h3>3. Reach the “final form” of a full-stack engineer</h3><p>I’ll close with this one, as I have some more to say here.</p><p>I’ve long struggled with keeping up with all of the different “stacks” that a full-stack developer works with simultaneously.</p><p>The three stacks I’m discussing here are front-end web development, back-end web development, and, for me, mobile development.</p><p>I have no problem staying fresh on <em>two</em> of these areas at a time. I’ll always be fresh with whichever piece is my primary responsibility at work, and I’ll always be fresh with whichever piece I choose to work on in my spare time. But fitting that third piece in somewhere is where I’ve struggled in the past.</p><p>For the last couple of years I’ve been most confident in my back-end and mobile skills, but I’ve lost some of the front-end skills I used to have. Before that, front-end and mobile were my stronger suits, but back-end dropped off. And the pattern continues.</p><p>I have all three going right now. I hope to keep that up and take them all to new heights this year. I’m taking on some smaller front-end projects at work while spending most of my time on back-end development. I’m keeping up with mobile in my spare time. I released a native iOS app in October of 2021 called <a href="https://apps.apple.com/us/app/outrank/id1588983785">Outrank</a> and am coming down to the wire on another as I write this.</p><p>I think this is the combination that works best for me. Doing mobile development primarily outside of work keeps it fresh and offers a break from the web technologies I typically work with during the day. This change of pace in the tech I work with, I hope, will keep the momentum going as I become a significant contributor in <em>all</em> facets of application development.</p><p>So now I’m off to year two at Storyboard. A year that will be full of personal changes and (hopefully) professional fulfillment. I couldn’t be more excited to continue working with this team, at this company, at this time. Full speed ahead ⚡️</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.ryantoken.com/blog/introducing-outrank</guid><title>Introducing Outrank</title><link>https://www.ryantoken.com/blog/introducing-outrank</link><description><![CDATA[Today I’m excited to debut my first new iOS app in three years:]]></description><pubDate>Tue, 26 Oct 2021 12:00:00 +0000</pubDate><dc:creator><![CDATA[Ryan Token]]></dc:creator><category><![CDATA[ios]]></category><category><![CDATA[swift]]></category><category><![CDATA[swiftui]]></category><content:encoded><![CDATA[<p>Today I’m excited to debut my first new iOS app in three years:</p><p><em>icon courtesy of my wife, Emma</em></p><p>If you’re a fan of American college football, this app is for you. Available for iOS, iPadOS, and macOS (on M1 Macs), Outrank is the easiest way to check how your favorite teams stack up against the rest. It shows you where your team ranks in forty-seven different tracked statistics compared to the other 129 FBS teams.</p><p><a href="https://apps.apple.com/us/app/outrank/id1588983785"><img src="https://www.ryantoken.com/images/outrank/outrank-rankings.png" class="img-fluid"></a></p><p><a href="https://apps.apple.com/us/app/outrank/id1588983785"><img src="https://www.ryantoken.com/images/outrank/outrank-detail.png" class="img-fluid"></a></p><p><a href="https://apps.apple.com/us/app/outrank/id1588983785"><img src="https://www.ryantoken.com/images/outrank/outrank-compare.png" class="img-fluid"></a></p><p><a href="https://apps.apple.com/us/app/outrank/id1588983785"><img src="https://www.ryantoken.com/images/outrank/outrank-settings.png" class="img-fluid"></a></p><p><em>screenshots courtesy of Federico Viticci and his wonderful <a href="https://www.macstories.net/ios/apple-frames-2-0-faster-lighter-and-featuring-support-for-iphone-13-ipad-mini-ipad-10-2-imac-24-macbook-air-and-multiple-languages/">Apple Frames</a> shortcut</em></p><p>Ever wonder where your team ranks in total offense, team sacks, turnover margin, and red zone defense? All of this is simply glanceable information for each team instead of needing to hunt for each stat individually.</p><p>Want to preview the most intriguing matchups of the week? There’s a feature for that, too. From the Compare tab, you can select any two teams and see how they compare with a convenient side-by-side view.</p><p>Other features include:</p><ul><li>Widgets to show a team’s top four and bottom four stats</li><li>The ability to set your favorite teams and watch them sync seamlessly between Apple devices</li><li>A UI that’s flexible enough to extend to iPadOS and macOS apps (for M1 MacBooks)</li><li>Tip jar and subscription options</li></ul><p>I built Outrank because I needed it. I host a college football podcast and wanted a quick way to find where my favorite teams stacked up, but couldn’t find a service that provided it without a lot of pain in the process.</p><p>The app is free with no ads. It makes me no money by default. If you enjoy Outrank, I’d love it if you left a tip or subscribed in the app, or supported my work on <a href="https://patreon.com/thegoldenhurricast">Patreon</a> or <a href="https://buymeacoffee.com/ryantoken">Buy Me a Coffee</a>.</p><p>Thank you for your interest in Outrank. If you have a feature request or feedback, please get in touch on <a href="https://twitter.com/OutrankApp">Twitter</a> or <a href="mailto:outrankapp@gmail.com">send me an email</a>.</p><p>I’ll end the main post here, but there are extra details on the app and my experience building it further down for anyone interested.</p><p><a href="https://apps.apple.com/us/app/outrank/id1588983785?itsct=apps_box_badge&amp;itscg=30200" style="display: inline-block; overflow: hidden; border-radius: 13px; width: 250px; height: 125px;"><img src="https://tools.applemediaservices.com/api/badges/download-on-the-app-store/black/en-us?size=250x83&amp;releaseDate=1635206400" alt="Download on the App Store" style="border-radius: 13px; width: 250px; height: 83px;"></a></p><hr /><br />
<h1>Extra Points</h1><p>Hello! If you’re still reading this, thank you! I had a blast building Outrank. I thought I’d go a bit deeper and share my experience building the app, things I learned, the technologies involved, and more.</p><h2>SwiftUI</h2><p>First, a comment on SwiftUI. 100% of Outrank is written with it - there is no bridging into UIKit for anything, and there’s no Objective-C code either. It’s all Swift and SwiftUI, just as the good lord intended.</p><p>When I rewrote my first app <a href="https://apps.apple.com/us/app/catchup-keep-in-touch/id1358023550">CatchUp</a> with SwiftUI last year, there were <em>a lot</em> of issues. I detailed some of them in <a href="https://www.ryantoken.com/blog/catching-up">this post</a>. Long story short, nearly all of the big SwiftUI bugs I ran into with CatchUp have been resolved! This is <strong>not</strong> to say that SwiftUI is now flawless. It absolutely has problems, and debugging those problems can sometimes be baffling, but the entire SwiftUI development experience has improved so much since last year. I was astounded.</p><h2>Development Efficiency</h2><p>This brings me to my second point: development speed and efficiency.</p><p><code>File > New > Project</code> for this app happened on October 2nd, 2021. Three weeks later, the app was done and released to the world. And I should note that I have a full-time job doing full-stack web development. All development time for this was either in the mornings before work, the evenings after work, or on weekends.</p><p>There are a few different reasons I was able to ship this so quickly.</p><p>First, on June 29th, 2021, I began Paul Hudson’s <a href="https://www.hackingwithswift.com/100/swiftui">100 Days of SwiftUI</a> course. On October 7th, exactly 100 days later, I finished it. I began working on Outrank on Day 95.</p><p>I simply cannot express how much working through this course helped me. I had started it twice before over the years but burnt out around Day 40 both times. This time, due to a combination of support from my partner and posting daily in the <a href="https://hackingwithswift.slack.com/join/shared_invite/zt-rgfapib5-hQut2NVKwv6RwQ64VbYvtQ#/shared-invite/email">Hacking with Swift Slack Channel</a> as Paul recommends, I was able to stay locked in and complete the course.</p><p>This was undoubtedly the most significant contributor to the development speed I mentioned. Working with Swift effectively every day for 100 straight days and taking all of that knowledge and practice directly into a new app paid off immensely. Being familiar with the latest SwiftUI techniques and having it all fresh in my head made all the difference in the world. And when I needed to go somewhere for advice, both <a href="https://www.hackingwithswift.com">Hacking with Swift</a> and <a href="https://www.swiftbysundell.com">Swift by Sundell</a> provided vast repositories of sample code, guidance, and articles to help me figure it out. And, of course, the indomitable <a href="https://www.stackoverflow.com">Stack Overflow</a>.</p><p>The second most important contributor to development speed was simply SwiftUI’s power and convenience. This wound up being the perfect app for SwiftUI. Outrank uses a lot of <code>List</code>s, the UI doesn’t try and get too “custom”, and there was no need to bridge into UIKit for anything. That last part made things particularly clean. I’ve written a UIKit app before, and I’m comfortable bridging into it from SwiftUI when necessary (see <a href="https://apps.apple.com/us/app/catchup-keep-in-touch/id1358023550">CatchUp</a> and its contact picker), but <em>not</em> needing to build those bridges makes things much smoother.</p><p>SwiftUI gives you so many features for free. Dark mode support, solid accessibility features out of the box, simple animations, the ability to jettison storyboards into the ether, flexible layouts between iOS, iPadOS, and macOS - all of this comes built-in with no changes required. Of course, to take full advantage of these features, you can (and should) go deeper than what SwiftUI provides by default, but it’s impressive how much you get just by opting into the SwiftUI lifestyle.</p><h2>Other Technologies</h2><p>To close things out, a bit on some of the other core technologies involved with the app:</p><p>Syncing favorite teams between Apple devices happens exclusively with <a href="https://developer.apple.com/documentation/coredata">Core Data</a> and <a href="https://developer.apple.com/icloud/cloudkit/">CloudKit</a>, which was surprisingly simple to set up.</p><p>The back-end infrastructure is all AWS-based. I have a <code>node.js</code> server that handles a lot of the rankings data collection. That server throws its data into a couple of different <code>DynamoDB</code> tables, and the app calls various <code>API Gateway</code> endpoints that trigger <code>Lambda</code> functions to query those DB tables. The results of those API calls return JSON that I decode into Swift structs which finally winds up inside a SwiftUI <code>List</code> in the UI. All of the AWS infrastructure is generated via <a href="https://en.wikipedia.org/wiki/Infrastructure_as_code">IAC</a> with the <a href="https://www.serverless.com/framework">Serverless Framework</a> and <a href="https://www.terraform.io">Terraform</a>.</p><p>There is no web front-end for this yet, but that is one of my goals for the app. I’m <a href="https://www.ryantoken.com/blog/rocking-with-the-jamstack//">big into Jamstack</a> web development and have recently been experimenting with the <a href="https://v3.nuxtjs.org/">Nuxt 3 beta</a>. My background with front-end web development is in <a href="https://reactjs.org/">React</a>, but the plan is to build the web front-end for Outrank with Nuxt 3 once it’s out in production.</p><h2>A Quick Note on Privacy</h2><p>I collect/store <em>none</em> of your data. Literally 0. I have no interest in any of it, so let’s put that to bed right now. You can read my <a href="https://www.ryantoken.com/privacy-policy">Privacy Policy</a> and <a href="https://www.ryantoken.com/terms-of-use">Terms of Use</a> for more information.</p><h2>Signing Off</h2><p>That covers all of the big pieces I wanted to get to about this app. I have legitimately had a wonderful time building this, and (95% of the time) SwiftUI continues to be a true joy to work with.</p><p>Thank you for reading. If you have questions, comments, feedback, feature requests, or anything else about the app, please <a href="mailto:outrankapp@gmail.com">email me</a>.</p><p><a href="https://apps.apple.com/us/app/outrank/id1588983785?itsct=apps_box_badge&amp;itscg=30200" style="display: inline-block; overflow: hidden; border-radius: 13px; width: 250px; height: 125px;"><img src="https://tools.applemediaservices.com/api/badges/download-on-the-app-store/black/en-us?size=250x83&amp;releaseDate=1635206400" alt="Download on the App Store" style="border-radius: 13px; width: 250px; height: 83px;"></a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.ryantoken.com/blog/joining-storyboard</guid><title>I'm Joining Storyboard!</title><link>https://www.ryantoken.com/blog/joining-storyboard</link><description><![CDATA[Hello out there! Relatively quick life update here – I’m joining a new company!]]></description><pubDate>Sun, 25 Apr 2021 12:00:00 +0000</pubDate><dc:creator><![CDATA[Ryan Token]]></dc:creator><category><![CDATA[career]]></category><category><![CDATA[aws]]></category><category><![CDATA[serverless]]></category><content:encoded><![CDATA[<p>Hello out there! Relatively quick life update here – I’m joining a new company!</p><p>After nearly four years with <a href="https://conocophillips.com">ConocoPhillips</a>, I’m joining <a href="https://trystoryboard.com">Storyboard</a> as a Full Stack Software Engineer.</p><p>I did truly enjoy my time working at ConocoPhillips. I worked on projects I’m proud of and teams I loved, I grew significantly as an employee and as a human being, and I made some very good friends along the way. It was my first job out of college, and I loved it – it was tough to step away.</p><p>What brought me to Storyboard was five-fold:</p><h3>1. The product</h3><p>Storyboard is the app for private podcasts.</p><p>Imagine a company wants to start a private, internal podcast for its employees. They want to interview the leadership team, send out weekly company updates, and roll out various forms of training in podcast form. There could be several hurdles to overcome. Secure distribution likely being the biggest one.</p><p>Many companies will do a great job recording an episode, but then post the .mp3 file on an internal SharePoint site and include the link in some big company newsletter along with fifty other things. Not ideal. You need to open the email, you need to be on the company network, you need to find the SharePoint URL every time you want to listen to an episode, the list goes on. I’ve seen this scenario first hand.</p><p>Storyboard solves this problem. If the company uses Storyboard to record/distribute its podcasts, the company’s podcast episodes are pushed to you like any other podcast player. These episodes are secured via Single Sign On (SSO) and only accessible by active employees.</p><h3>2. My personal interests</h3><p>Podcasts are just cool. I’d argue that I’ve gotten more value out of listening to podcasts than any other form of media. Some of my favorites include Accidental Tech Podcast, Big Technology Podcast, How I Built This, Syntax, and Startups For the Rest of Us.</p><p>As you might know, I also run <a href="https://thegoldenhurricast.com">my own podcast</a> about athletics at The University of Tulsa. I love listening to and creating podcasts. The idea that I could actively help bring this medium to the enterprise is extremely exciting.</p><h3>3. My professional interests</h3><p>My previous two blog posts have been about 1) <a href="https://www.ryantoken.com/blog/rocking-with-the-jamstack">the Jamstack</a>, and 2) <a href="https://www.ryantoken.com/blog/learning-webrtc">WebRTC</a>. This role combines both of those interests and so many more.</p><p>I spend the vast majority of my time both in my professional work and my side projects in the world of AWS - specifically on the serverless side of things. Recently, I’ve been deep into the AWS CDK for efficient management and development of AWS infrastructure. The CDK is incredibly powerful and I plan to use it as much as possible in my role with Storyboard.</p><h3>4. It’s fully remote</h3><p>The ethos of Storyboard is that employees should be able to collaborate and work together from anywhere. As such, everyone at Storyboard is remote. At the time of publishing I haven’t met everyone quite yet, but of those I’m aware - there are employees in Los Angeles, Denver, New York, and Nashville.</p><p>I’ll be working remotely out of Tulsa. It’s wonderful to be able to stay in the town where my wife and I graduated from college just four years ago, where my wife still works downtown, and where I still have so many close friends. The technology scene in Tulsa is also booming right now. Coworking spaces like <a href="https://36degreesnorth.co">36°N</a> and others, along with the <a href="https://tulsaremote.com">Tulsa Remote</a> program, have accelerated the city’s technology ecosystem rapidly.</p><h3>5. It’s a startup</h3><p>I’ve long been interested in the startup world, and this one checks all the boxes.</p><p>✅ A product I believe in</p><p>✅ A founder I believe in</p><p>✅ My ideal technology stack</p><p>✅ Remote work</p><p>✅ A combination of my interests</p><p>I’m psyched to give everything I’ve got to a product and a team like this.</p><h2>Start Date</h2><p>My first day with Storyboard is April 26th, 2021. I can’t wait.</p><p>While I did sincerely enjoy my time with ConocoPhillips, I couldn’t be more excited to begin this new adventure.</p><p>And if your company wants to get started with a private podcast, <a href="mailto:admin@trystoryboard.com">get in touch</a>!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.ryantoken.com/blog/learning-webrtc</guid><title>Learning WebRTC</title><link>https://www.ryantoken.com/blog/learning-webrtc</link><description><![CDATA[WebRTC can be tricky to wrap your mind around – there’s a lot involved and it’s easy to get overwhelmed. Once you understand the basics though, it’s much easier to reason about the rest.]]></description><pubDate>Sun, 07 Mar 2021 12:00:00 +0000</pubDate><dc:creator><![CDATA[Ryan Token]]></dc:creator><category><![CDATA[web]]></category><category><![CDATA[webrtc]]></category><content:encoded><![CDATA[<p>WebRTC can be tricky to wrap your mind around – there’s a lot involved and it’s easy to get overwhelmed. Once you understand the basics though, it’s much easier to reason about the rest.</p><p>I’ve been working heavily with the standard over the past several weeks and wanted to document the knowledge I’ve gained while also providing some sample code, evaluating the technology’s pros and cons, and supplying resources for continued learning.</p><p><a href="https://webrtc.org">WebRTC</a> stands for <b>Web</b> <b>R</b>eal-<b>T</b>ime <b>C</b>ommunication and, as you’d expect from the name, enables real-time communication for the web. Think video calls, web-based chat, etc.</p><p>The technology has grown significantly since its initial implementation in 2011 as an open-source project by Google. Today, it’s implemented as an open, standardized API that enables rich peer-to-peer communications, including the transmission of audio, video, and generic data between browsers, mobile devices, IoT devices, and more.</p><p>The most important thing WebRTC takes off your plate is the challenge of finding the best peer-to-peer path to exchange data in an efficient and low-latency manner.</p><p><img src="https://www.ryantoken.com/images/learning-webrtc/webrtc-overview.jpg" alt="WebRTC overview" class="img-fluid"></p><p><em>WebRTC Pathfinding - diagram from <a href="https://www.youtube.com/watch?v=FExZvpVvYxA">WebRTC Crash Course</a></em></p><h2>A Typical WebRTC Lifecycle</h2><ul><li>Client <em>A</em> wants to connect to Client <em>B</em></li><li><em>A</em> first needs to determine all possible ways that the public can connect to it (A)</li><li><em>B</em> then also needs to determine how the public can connect to it (B)</li><li><em>A</em> and <em>B</em> signal this session information (SDP) (more on this later) to each other <strong>somehow</strong>. This can be via text message, with a QR code, via HTTP, via WebSockets, or something else. How you send this information doesn’t matter.</li><li><em>A</em> then connects to <em>B</em> via the most optimal path (determined by ICE) (more on this later as well)</li><li><em>A</em> & <em>B</em> also exchange their supported media types and security information</li><li>An agreement is made, and the connection is opened</li></ul><br />
<h2>Necessary Concepts & Terminology</h2><p>There are several terms you’ll need to be familiar with before we discuss WebRTC further. I’ll briefly introduce them below.</p><p><em><strong>NAT</strong></em>: Network Address Translation</p><p>To understand WebRTC, you have to understand the fundamentals of NAT. I’ll try my best at a simple explanation of NAT and why it’s necessary here.</p><p><em>The problem</em>: Devices don’t have their own public IP addresses.</p><p>The only way to connect to another device is via its public IP address. If our device doesn’t have its own public IP, how will we be able to communicate that information out for someone else to use?</p><p><em>The answer</em>: NAT</p><p>NAT bridges this gap. NAT operates on the router and translates our devices’ private IPs into a public IP that others can reach us at.</p><p>When others try to reach you, they ultimately reach your router’s public IP and your router translates that back to your device’s private IP.</p><p>There are four different NAT types: Full Cone NAT (normal NAT), Address-Restricted NAT, Port-Restricted NAT, and Symmetric NAT. All of these work well with WebRTC <em>except</em> Symmetric NAT. More info on the four NAT types <a href="https://dh2i.com/kbs/kbs-2961448-understanding-different-nat-types-and-hole-punching/">here</a>.</p><blockquote><p><em>Edit</em>: According to the <a href="https://tools.ietf.org/html/rfc4787">Internet Engineering Task Force</a>, the “Cone” and “Symmetric” NAT terminology has done a poor job explaining NAT behavior. While you may still see these terms when reading about NAT, it is recommended to use the following terminology instead: Endpoint-Independent mapping and filtering, Address-Dependent mapping and filtering, and Address and Port-Dependent mapping and filtering.</p></blockquote><blockquote><p>Address and Port-Dependent mapping and filtering is the equivalent of Symmetric NAT, which is the only type that does not work with WebRTC. You can read more about the new NAT terminology <a href="https://en.wikipedia.org/wiki/Network_address_translation#Methods_of_translation">here</a>.</p></blockquote><p>In the context of WebRTC, our devices pass through our routers to a STUN server. The STUN server sends us back a public IP address we can use to connect peer-to-peer with another client.</p><p><em><strong>STUN</strong></em>: Session Traversal Utilities for NAT</p><p><img src="https://www.ryantoken.com/images/learning-webrtc/webrtc-STUN.jpg" alt="STUN server" class="img-fluid"></p><p><em>A STUN Server Example - diagram from <a href="https://www.youtube.com/watch?v=FExZvpVvYxA">WebRTC Crash Course</a></em></p><p>A STUN server’s main job is to tell a client what its public IP address/port is through NAT.</p><p>Talking to a STUN server is table stakes for any WebRTC application. We first need to find <em>our</em> public presence so we can communicate that information to someone else. Once someone else has that information, we can try to open a connection with them.</p><p>STUN servers are cheap to maintain, and many are publicly available for free usage.</p><p><em><strong>TURN</strong></em>: Traversal Using Relays around NAT</p><p><img src="https://www.ryantoken.com/images/learning-webrtc/webrtc-TURN.jpg" alt="TURN server" class="img-fluid"></p><p><em>A TURN Server Example - diagram from <a href="https://www.youtube.com/watch?v=FExZvpVvYxA">WebRTC Crash Course</a></em></p><p>As I mentioned previously, WebRTC does not work well with Symmetric NAT. This is caused by Symmetric NAT blocking communications with the STUN server.</p><p>If a router is using Symmetric NAT, STUN won’t work, and we’ll have to fall back to a TURN server. This gets rid of the peer-to-peer benefit of WebRTC and requires all communication to pass through this single TURN server instead, which creates a bottleneck and could buckle under heavy usage.</p><p>If a TURN server is required, I’ve heard people argue for just using a standard web server with a reverse proxy instead. Theoretically this would give you similar functionality while allowing you to have more control over the server. I haven’t formed my own opinion on this topic yet.</p><p><em><strong>ICE</strong></em>: Interactive Connectivity Establishment</p><p>So we’ve discussed private IP addresses, public IP addresses, STUN servers, TURN servers, and more. How do we know which options are the best to connect with?</p><p>This is the primary job of ICE. It finds the optimal path from one peer to another by conducting connectivity checks.</p><p>ICE collects all available ICE candidates (information for each available path) and sends them to the remote peer via SDP. ICE will then collect all available candidates on the remote peer as well.</p><p>With both peers’ session information now understood, ICE can determine the best path for a connection between the two clients.</p><p>This process can take some time, sometimes in the 10s of seconds. To get off the ground a little quicker, you can use a relatively new WebRTC feature called Trickle ICE. Trickle ICE takes the ICE process and runs it in parallel, so you won’t need to wait for every candidate to be found before sending the information via SDP. This can dramatically improve the time it takes to make the initial connection with the remote peer.</p><p><em><strong>SDP</strong></em>: Session Description Protocol</p><pre><code class="language-js">"sdp":"v=0\r\n\
o=- 20518 0 IN IP4 203.0.113.1\r\n\
s= \r\n\
t=0 0\r\n\
c=IN IP4 203.0.113.1\r\n\
a=ice-ufrag:F7gI\r\n\
a=ice-pwd:x9cml/YzichV2+XlhiMu8g\r\n\
a=fingerprint:sha-1 42:89:c5:c6:55:9d:6e:c8:e8:83:55:2a:39:f9:b6:eb:e9:a3:a9:e7\r\n\
m=audio 54400 RTP/SAVPF 0 96\r\n\
a=rtpmap:0 PCMU/8000\r\n\
a=rtpmap:96 opus/48000\r\n\
a=ptime:20\r\n\
a=sendrecv\r\n\
a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\r\n\
a=candidate:1 2 UDP 2113667326 203.0.113.1 54401 typ host\r\n\
m=video 55400 RTP/SAVPF 97 98\r\n\
a=rtpmap:97 H264/90000\r\n\
a=fmtp:97 profile-level-id=4d0028;packetization-mode=1\r\n\
a=rtpmap:98 VP8/90000\r\n\
a=sendrecv\r\n\
a=candidate:0 1 UDP 2113667327 203.0.113.1 55400 typ host\r\n\
a=candidate:1 2 UDP 2113667326 203.0.113.1 55401 typ host\r\n\
"
</code></pre><p><em>An SDP Example - basically a giant string of session information</em></p><p>SDP is arguably the most important concept in WebRTC. SDP is the information that ICE sends back and forth to try and establish the best possible connection.</p><p>Despite its name, SDP is less of a protocol and more of a <em>format</em>. It describes all ICE candidates, networking options, media options (audio/video), security options, etc., and combines it all into one massive string.</p><p>Once another client has this information, a connection between the two clients can be attempted.</p><p>For another person to connect with us though, we need some way to communicate our SDP information out to them. This is called <strong>signaling</strong>.</p><p>Once you have your SDP string, you’ll need to signal it out yourself. WebRTC does not care how this is done, but it also doesn’t provide a built-in way to do this. You can send out your SDP information through a QR code, a messaging app like WhatsApp or iMessage, via WebSockets, HTTP, or anything else. We just need to get that large SDP string to the other party.</p><p><em><strong>DTLS, SRTP, & SCTP</strong></em> – Securing and Customizing WebRTC Data Flow</p><blockquote><p><em>DTLS</em>: Datagram Transport Layer Security</p></blockquote><blockquote><p><em>SRTP</em>: Secure Real-time Transport Protocol</p></blockquote><blockquote><p><em>SCTP</em>: Stream Control Transmission Protocol</p></blockquote><p><img src="https://www.ryantoken.com/images/learning-webrtc/webrtc-security.png" alt="WebRTC Data Flow Diagram" class="img-fluid"></p><p><em>WebRTC Data Flow - diagram concept from <a href="https://bloggeek.me/sctp-data-channel/">BlogGeek.me</a></em></p><p>Note that WebRTC did not introduce these protocols. They were around long before WebRTC was established in 2011. DTLS was invented in 2006, SRTP in 2004, SCTP in 2000.</p><p>The purpose of DTLS and SRTP is to secure the connection previously established by ICE.</p><p>First, WebRTC does a DTLS handshake over the connection that ICE established. Once that handshake has been completed, we have a secure connection, and this new DTLS connection is used for messages over our data channel.</p><p>We then use SRTP for secure audio and video transmission. The SRTP session is encrypted by extracting the keys from the negotiated DTLS session.</p><p>Once both of these steps have been completed, we have a bi-directional and secure communication channel.</p><p>The final term to understand here is SCTP. SCTP provides different options for delivering messages. You can choose to have unreliable, out-of-order delivery so you can get the latency needed for real-time systems; or you can opt for reliable, in-sequence transmission of messages with congestion control.</p><h2>Revisiting the WebRTC Lifecycle</h2><p>Now that we understand the fundamental WebRTC concepts, let’s revisit a standard WebRTC communication lifecycle with some more detail.</p><p>Some additional information first: Every client maintains two SDP descriptions, a local SDP description and the SDP description of the remote client it’s trying to connect to.</p><ul><li>Client <em>A</em> wants to connect to Client <em>B</em></li><li><em>A</em> creates an <strong>offer</strong>. The offer is just the SDP string that consists of all ICE candidates, security options, audio/video options, etc</li><li><em>A</em> then sets its <strong>local</strong> SDP description to the <strong>offer</strong> it just created.</li><li><em>A</em> signals that offer to <em>B</em> via SDP. Again, it doesn’t matter how this signaling happens (iMessage, HTTP request, etc)</li><li><em>B</em> receives <em>A</em>’s <strong>offer</strong>, and sets <em>A</em>’s <strong>offer</strong> as its remote SDP description</li><li><em>B</em> creates an <strong>answer</strong> to send back to <em>A</em>, and sets that <strong>answer</strong> as its own local SDP description</li><li><em>B</em> signals its <strong>answer</strong> to <em>A</em> via SDP</li><li><em>A</em> receives <em>B</em>’s <strong>answer</strong>, and sets <em>B</em>’s <strong>answer</strong> as <em>A</em>’s remote SDP description</li><li>With all SDP information now understood by both parties, an agreement can be made. The connection is created and data can flow between the two clients</li></ul><h2>A Vanilla Implementation</h2><p>Let’s walk through how to create a basic WebRTC connection between two peers using just the vanilla WebRTC API. We won’t use any libraries or anything extra on top of it – just the basics so you really understand what’s happening here. You could run this code directly in two browser windows via the browser’s dev tools and it would work.</p><p>Note that we will not need to connect to any STUN or TURN servers in this example, as both browsers will be on the same local area network. STUN and TURN are only required when connecting to a remote peer on a different network. If we did need to connect to a STUN/TURN server, we’d pass that information into the new RTCPeerConnection we create in step one.</p><p><em><strong>Browser One</strong></em></p><ol><li>Create the local peer connection.</li></ol><pre><code class="language-javascript">const localConnection = new RTCPeerConnection()
</code></pre><ol><li>Create a data channel from that connection.</li></ol><pre><code class="language-js">const dataChannel = localConnection.createDataChannel("channel")
</code></pre><ol><li>Set up listeners on this channel for when a message is received (onmessage) and when a connection is opened (onopen).</li></ol><pre><code class="language-js">dataChannel.onmessage = e => console.log("Just got a message " + e.data)
dataChannel.onopen = e => console.log("Connection opened!")
</code></pre><ol><li>Set up a listener on the local connection for new ICE candidates. Print the SDP string every time we get a new ICE candidate. This will provide examples of what SDP strings look like.</li></ol><pre><code class="language-js">localConnection.onicecandidate = e => console.log("New ICE candidate! Reprinting SDP " + JSON.stringify(localConnection.localDescription))
</code></pre><ol><li>Create the offer locally, and set that offer as our local SDP description.</li></ol><pre><code class="language-js">localConnection.createOffer()
	.then(offer => localConnection.setLocalDescription(offer))
	.then(a => console.log("Set local SDP description successfully"))
</code></pre><p><em><strong>Browser Two</strong></em></p><p>Now open a new browser window, and we’ll work on connecting the two browsers.</p><ol><li>After running the previous commands in browser one, you should have an SDP offer string printed out in your browser’s dev tools. Copy and paste that from browser one, and set it to a new variable in browser two. It should look something like this:</li></ol><pre><code class="language-js">const offer = {"type":"offer","sdp":"v=0\r\no=- 6161885883039613335 2 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\na=group:BUNDLE 0\r\na=extmap-allow-mixed\r\na=msid-semantic: WMS\r\nm=application 9 UDP/DTLS/SCTP webrtc-datachannel\r\nc=IN IP4 0.0.0.0\r\na=candidate:613963537 1 udp 2122262783 8feb3e9a-4ba2-48b6-a5b9-b7e6164dad0d.local 50380 typ host generation 0 network-id 2 network-cost 50\r\na=ice-ufrag:m9IL\r\na=ice-pwd:HSi4w0HG5HCDGlhkTaJVACHM\r\na=ice-options:trickle\r\na=fingerprint:sha-256 B5:BF:A6:FA:45:FE:83:B7:AF:D2:03:5F:FC:EF:06:ED:2E:C2:51:A3:53:7E:7E:7A:B0:6D:AE:08:9C:3A:A4:D7\r\na=setup:actpass\r\na=mid:0\r\na=sctp-port:5000\r\na=max-message-size:262144\r\n"}
</code></pre><ol><li>Create the remote peer connection.</li></ol><pre><code class="language-js">const remoteConnection = new RTCPeerConnection()
</code></pre><ol><li>Print the SDP string every time we get a new ICE candidate on the remote side this time.</li></ol><pre><code class="language-js">remoteConnection.onicecandidate = e => console.log("New ICE candidate! Reprinting SDP " + JSON.stringify(remoteConnection.localDescription))
</code></pre><ol><li>Set up a listener on the remote connection that will receive the data channel from the other connection.</li></ol><pre><code class="language-js">remoteConnection.ondatachannel = e => {
	remoteConnection.dataChannel = e.channel // e.channel is the data channel we received from the other party
	remoteConnection.dataChannel.onmessage = e => console.log("New message from client! " + e.data)
	remoteConnection.dataChannel.onopen = e => console.log("Connection successfully opened!")
}
</code></pre><ol><li>Set our remote and local SDP descriptions based on the offer we received (remote SDP description) and the answer we create (local SDP description).</li></ol><pre><code class="language-js">// set remote description for the offer we received
remoteConnection.setRemoteDescription(offer)
	.then(a => console.log("Offer set!"))

// set local description with our answer
remoteConnection.createAnswer()
	.then(answer => remoteConnection.setLocalDescription(answer))
	.then(a => console.log("Answer created"))
</code></pre><p><em><strong>Back to Browser One</strong></em></p><ol><li>Set the answer SDP we just generated in the previous step to an answer variable.</li></ol><pre><code class="language-js">const answer = {"type":"answer","sdp":"v=0\r\no=- 1817317559757912498 2 IN IP4 127.0.0.1\r\ns=-\r\nt=0 0\r\na=group:BUNDLE 0\r\na=extmap-allow-mixed\r\na=msid-semantic: WMS\r\nm=application 9 UDP/DTLS/SCTP webrtc-datachannel\r\nc=IN IP4 0.0.0.0\r\na=candidate:613963537 1 udp 2122262783 264b84bf-cd92-41f3-9b5c-6d08060977f8.local 58006 typ host generation 0 network-id 2 network-cost 50\r\na=ice-ufrag:O629\r\na=ice-pwd:8TOlrnjf31jsOOIHZZGnT1Xh\r\na=ice-options:trickle\r\na=fingerprint:sha-256 DC:CE:94:53:BC:E1:BF:1F:67:44:08:5F:8E:A5:B7:AD:01:D3:84:C8:FC:D5:BA:D7:76:28:E3:3F:FC:15:3E:9B\r\na=setup:active\r\na=mid:0\r\na=sctp-port:5000\r\na=max-message-size:262144\r\n"}
</code></pre><ol><li>We’re coming full circle now. In the first section (Browser One), we set the local connection’s local description. In the second section (Browser Two), we set the remote connection’s local & remote descriptions. And now, we close the loop by setting the local connection’s remote description to the answer we just set in the previous step. This opens the connection between the two peers.</li></ol><pre><code class="language-js">localConnection.setRemoteDescription(answer)
</code></pre><ol><li>The connection is now open, and we can send data back and forth between the two browsers with the send() function.</li></ol><p><em>Browser One (the local connection)</em></p><pre><code class="language-js">dataChannel.send("Hello Peer B, what's up?")
</code></pre><p><em>Browser Two (the remote connection)</em></p><pre><code class="language-js">remoteConnection.dataChannel.send("Not much Peer A, what about you?")
</code></pre><ol><li>You should see each of those messages in the other browser’s dev tools now. 👍</li></ol><h2>WebRTC Pros and Cons</h2><p><em><strong>Pros</strong></em>:</p><ul><li>Having a peer-to-peer connection is fantastic. It allows for low latency and high-bandwidth content to be shared seamlessly</li><li>WebRTC provides a standardized way for developers to implement this functionality with an API that we don’t have to build ourselves</li><li>It’s a popular open-source technology supported by Google, Mozilla, Opera, and others. You can browse the source code <a href="https://webrtc.googlesource.com/src/" target="_blank" rel="noreferrer">here</a></li></ul><p><em><strong>Cons</strong></em>:</p><ul><li>Maintaining STUN and TURN servers * STUN isn’t too bad since there are free STUN servers <a href="https://gist.github.com/zziuni/3741933">publicly available for you to use</a>. * TURN is expensive and more difficult, and no one offers them for free usage like STUN servers * Kind of a Pro, but you <em>can</em> create your own STUN and TURN servers with the <a href="https://github.com/coturn/coturn">COTURN</a> open-source project</li><li>Peer-to-Peer can fall apart in cases of many participants * If you have 100 people in one environment, maintaining peer-to-peer connections between all 100 people isn’t viable. This would be 99x100 individual connections * A centralized server makes more sense here. Everyone connects to the centralized server, and you maintain the connection and traffic rules on that server * More latency in this scenario, but much more viable * Large online games don’t use WebRTC, for example. They use a centralized server people connect to</li></ul><h2>Powering Up with Amazon Kinesis Video Streams</h2><p>As mentioned, one of the cons of WebRTC is the need to maintain and manage various STUN and TURN servers.</p><p><a href="https://docs.aws.amazon.com/kinesisvideostreams-webrtc-dg/latest/devguide/what-is-kvswebrtc.html">Amazon Kinesis Video Streams with WebRTC</a> offers a potential solution to this problem, as well as handling the signaling implementation for you.</p><p>AWS offers <a href="https://docs.aws.amazon.com/kinesisvideostreams-webrtc-dg/latest/devguide/webrtc-sdks.html">SDKs</a> to work with this service from the web, iOS, Android, and embedded devices.</p><p>In AWS’s words, Amazon Kinesis Video Streams (KVS) “provides a standards-compliant WebRTC implementation as a fully managed capability. You can use Amazon Kinesis Video Streams with WebRTC to securely live stream media or perform two-way audio or video interaction between any camera IoT device and WebRTC-compliant mobile or web players. As a fully managed capability, you don’t have to build, operate, or scale any WebRTC-related cloud infrastructure, such as signaling or media relay servers to securely stream media across applications and devices.”</p><p>Using this service abstracts away the need to manage your own STUN and TURN servers while optimizing for even lower latency and higher bandwidth streaming.</p><p>There’s a fantastic walkthrough of how to get up and running with this service <a href="https://aws.amazon.com/blogs/media/enabling-video-chats-using-amazon-kinesis-video-streams-for-webrtc/">here</a>. Familiarity with AWS isn’t necessarily required to follow that blog post but is certainly helpful.</p><p><img src="https://www.ryantoken.com/images/learning-webrtc/webrtc-kvs.png" alt="AWS KVS with WebRTC Diagram" class="img-fluid"></p><p><em>AWS Kinesis Video Streams with WebRTC Architecture Diagram</em></p><p>I was able to build a very performant peer-to-peer video streaming application by building on top of the aforementioned walkthrough. I recommend giving it a try and seeing how it goes for you. There’s also some fantastic sample code on <a href="https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-js">GitHub</a>.</p><h2>Resources I Used While Learning</h2><ul><li><em>Getting Started with WebRTC</em> on <a href="https://webrtc.org/getting-started/overview">WebRTC.org</a></li><li><em>WebRTC API</em> on the <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebRTC_API">Mozilla Developer Network</a></li><li><em><a href="https://webrtcforthecurious.com">WebRTC For The Curious</a></em></li><li><em>WebRTC Crash Course</em> on <a href="https://www.youtube.com/watch?v=FExZvpVvYxA">YouTube</a><ul><li>This was particularly helpful. I highly recommend you take the time to watch the full thing</li><li>Many of the concepts in this post were inspired directly by this video</li></ul></li><li><em>Introduction to WebRTC</em> on <a href="https://www.youtube.com/watch?v=NdEEp_WvnvU&t=705s">YouTube</a></li><li><em>What is Kinesis Video Streams with WebRTC</em> from <a href="https://docs.aws.amazon.com/kinesisvideostreams-webrtc-dg/latest/devguide/what-is-kvswebrtc.html">AWS</a></li><li><em>Kinesis Video Streams with WebRTC: How it Works</em> from <a href="https://docs.aws.amazon.com/kinesisvideostreams-webrtc-dg/latest/devguide/kvswebrtc-how-it-works.html">AWS</a></li><li><em>Enabling Video Chats Using Amazon Kinesis Video Streams with WebRTC</em> from <a href="https://aws.amazon.com/blogs/media/enabling-video-chats-using-amazon-kinesis-video-streams-for-webrtc/">AWS</a></li><li><em>Amazon Kinesis Video Streams implementation</em> on <a href="https://github.com/awslabs/amazon-kinesis-video-streams-webrtc-sdk-js">GitHub</a></li></ul><h2>A Final Note</h2><p>There are a lot of YouTube videos that claim to teach you WebRTC by “building a Zoom clone” or something similar. I worked through a couple of these and found them to be less than valuable. Most layer on a bunch of third-party libraries like socket.io, simple-peer, peer.js, and others to handle the dirty work.</p><p>In my opinion, it’s far better to fully understand the fundamentals before adding on these libraries.</p><p>Thank you for reading!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.ryantoken.com/blog/rocking-with-the-jamstack</guid><title>Rocking with the Jamstack</title><link>https://www.ryantoken.com/blog/rocking-with-the-jamstack</link><description><![CDATA[There comes a time in every young developer’s life when they stumble upon a technology, or a philosophy around technologies, that just works for them. At least, that’s what I envision an older and more experienced developer telling me.]]></description><pubDate>Sun, 21 Feb 2021 12:00:00 +0000</pubDate><dc:creator><![CDATA[Ryan Token]]></dc:creator><category><![CDATA[web]]></category><category><![CDATA[jamstack]]></category><category><![CDATA[serverless]]></category><content:encoded><![CDATA[<p>There comes a time in every young developer’s life when they stumble upon a technology, or a philosophy around technologies, that just <em>works</em> for them. At least, that’s what I envision an older and more experienced developer telling me.</p><p>That’s been the <a href="https://jamstack.org">Jamstack</a> for me.</p><p>The Jamstack, originally styled as JAMstack, can sound a bit nebulous at first. The J-A-M there stands for <strong>J</strong>avaScript, <strong>A</strong>PIs, and <strong>M</strong>arkup. Those are the only required ingredients for any Jamstack application. There is no specific framework involved, no cloud provider or back end language you <em>need</em> to use, no required toolchain or build process. There are very few hard-and-fast requirements at all. It is a vague term intentionally, and that’s one of its positives, but there <strong>are</strong> two requirements.</p><p><em><strong>First</strong></em>: a static front end</p><p>A Jamstack front end is pre-rendered. That is to say, the content that a user sees on the client-side is generated <em>before</em> it’s required, not <em>once</em> it’s required. This gives Jamstack applications a massive speed advantage.</p><p>This markup generation happens during a build step rather than on-demand on the server-side. Because of this, your app doesn’t need to repeatedly make network round-trips to serve up the pages the user requests; they’ve already been generated and are there instantly for the user to interact with. This takes the load off of the web host and dramatically improves scalability.</p><p><em><strong>Second</strong></em>: decoupling</p><p>A college professor of mine continually stressed the idea of applications that were “loosely coupled and highly cohesive”.</p><p>Half of the idea he was pushing here was the concept of decoupling. A decoupled application has clean separation points between its various parts. Decoupling allows each component of the application to be more easily understandable and simpler to swap out or upgrade.</p><p>The key takeaway in the context of the Jamstack is to enforce a clean separation between your front end and your back end services.</p><p>This means a static site on the front end with serverless functions on the back end. Your front end should not care what you’re using on the back end, and vice-versa. Each can be iterated on independently without ever impacting the other.</p><p>The loosely coupled glue between the front end and back end in a Jamstack application is the API layer. I use AWS’s <a href="https://aws.com/api-gateway">API Gateway</a> to host my APIs, but there are plenty of options.</p><h2>Ok, great, but seriously what IS the Jamstack?</h2><p>All of this is to say that the Jamstack is NOT a specific set of languages or tools you need to learn - it’s a mindset of <em>how</em> to build applications (with some recommendations 🙂).</p><p><img src="https://www.ryantoken.com/images/rocking-with-the-jamstack/rwj-architecture.png" alt="Jamstack architecture" class="img-fluid"></p><h2>Why Should You Care?</h2><p>Modern web development can be exhausting and overwhelming. Jamstack applications aim to simplify your architecture while significantly enhancing the speed, scalability, and overall performance of your application.</p><ul><li><strong>Speed</strong>: The fact that all of your pages are static and pre-rendered means your page load times will decrease dramatically compared to a standard server-side rendered app.</li><li><strong>Scalability</strong>: Server-side rendered applications inherently slow down when under heavy load. The web servers get buried under a mountain of requests and suffer when they can’t fulfill all the requests for each page in time. This problem simply does not exist for Jamstack applications. The pages are already rendered on the front end – all your app needs to do is show users the page they want. No network round-trip necessary.</li><li><strong>Future Proofing</strong>: The decoupled nature of Jamstack applications means you can easily swap out your Angular front end with a React front end, or vice-versa. Want to migrate your back end services from Azure to AWS? Or write them all in Python instead of Node.js? Your front end won’t care, and it will be a much simpler process.</li><li><strong>Developer Experience</strong>: Developing with the Jamstack is just fun. There are cutting-edge technologies in use across the board. Having Netlify automatically see a change on my main branch in GitHub and then seamlessly deploy a new build out to production still makes me smile every time. The Jamstack supports all of the latest JavaScript frameworks too. React, Gatsby, Next.js, Hugo, and more are all widely supported.</li></ul><h2>How to Get Started</h2><p>It’s easier than you think! Outside of a basic understanding of JavaScript and APIs, there are hardly any <em>specific</em> technologies you need to know in order to start building Jamstack applications. There are some concepts you should be familiar with, though:</p><ul><li><strong>Static Site Generators</strong>: Frameworks that take in one source, like JavaScript or Markdown, and create static HTML files from them. Examples include <a href="https://gatsbyjs.com">Gatsby</a>, <a href="https://gohugo.io">Hugo</a>, <a href="https://nextjs.org">Next.js</a>, and I’d even include the indomitable <a href="https://create-react-app.dev">Create React App</a>.</li><li><strong>Hosting Sites</strong>: Where you host the static content generated by your static site generator. My go-to has been <a href="https://netlify.com">Netlify</a>, a consistent champion of the Jamstack. Others include <a href="https://vercel.com">Vercel</a>, <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html">AWS S3 Static Hosting</a>, and <a href="https://docs.microsoft.com/en-us/azure/storage/blobs/storage-blob-static-website">Azure Storage</a>.</li><li><strong>Back End Services</strong>: The “A” in Jamstack stands for APIs. Those API calls typically route to some serverless functions that you create but don’t maintain physical infrastructure for. These can be AWS <a href="https://aws.amazon.com/lambda">Lambda</a> functions, <a href="https://netlify.com/products/functions">Netlify Functions</a>, <a href="https://azure.microsoft.com/en-us/services/functions">Azure Functions</a>, or a host of others. With Netlify Functions specifically, you can create a file for each function, add a configuration file that tells Netlify where those files are, and Netlify will handle the rest. Netlify automatically hosts them as Lambda functions for you and takes care of everything from there.</li><li><strong>Data Storage</strong>: Your serverless database. Where your data will persist. The top options among Jamstack developers include <a href="https://aws.amazon.com/dynamodb">DynamoDB</a>, <a href="https://fauna.com">Fauna</a>, <a href="https://mongodb.com">MongoDB</a>, and <a href="https://airtable.com">AirTable</a>.</li></ul><p>There are also plenty of learning resources out there. One of the best is <a href="https://jamstackconf.com">Jamstack Conf</a> - a semiannual developer conference solely focused on the Jamstack. The past few events have been free to attend, and I’ve gotten a lot of value out of them.</p><h2>My Experience So Far</h2><p>I’ve built several Jamstack applications now and have thoroughly enjoyed every bit of it. Of all its benefits, the one that resonates most with me is just how fun it is to write apps this way. Creating a React front end that calls an array of serverless functions, all while hosted on the powerful Netlify CDN, was incredibly quick to set up and simple to reason about.</p><p>Another point that I haven’t touched on yet: if you are a hobby developer who doesn’t want to spend much (or any) money, this way of building applications can be mind-bogglingly powerful.</p><p><strong>Some quick price points for you:</strong></p><ul><li>Basic CDN and Hosting with Netlify: <em>Free</em></li><li>Serverless Functions with AWS Lambda: <em>Free</em> (up to one million function calls per month)</li><li>API Setup with AWS API Gateway: <em>Free</em> (up to one million API calls per month)</li><li>Data Storage with AWS DynamoDB: <em>Free</em> (up to 25 GB of data)</li></ul><p>Yes, you read that right. You can build and run a fairly sizable project <em>completely</em> for free. I’ve had two Jamstack applications running live in production with hundreds of users for months, and have yet to be charged a dime. It’s so good it almost feels like cheating.</p><h2>Next Steps</h2><p>I am all-in on the Jamstack. As always, there are plenty of areas still for me to expand on and improve.</p><p>My front ends are all currently either using Gatsby or Create React App. I am <em>very</em> interested in <a href="https://nextjs.org">Next.js</a>, and will be diving into this heavily in the near future. Netlify was very quick to support Next.js, and I’m psyched about this integration.</p><p>I’m also (in my opinion) a bit too much of an AWS purist right now. Don’t get me wrong, AWS is fantastic, but I need to diversify a bit. Some of the other options I mentioned above, specifically in the data storage realm, sound quite exciting. Using <a href="https://fauna.com">Fauna</a> as a data store over AWS’s DynamoDB is likely in my future.</p><p>Further, I want to try out Netlify’s own serverless Netlify Functions feature instead of manually building my own Lambda functions within AWS.</p><p>That’s where I’m at for now. I’m extremely excited about the future of web development with the Jamstack. There are so many cool things happening around developer experience and workflow right now. The future looks incredibly bright, and the Jamstack is leading the charge.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.ryantoken.com/blog/catching-up</guid><title>Catching Up</title><link>https://www.ryantoken.com/blog/catching-up</link><description><![CDATA[CatchUp - Keep in Touch was first released on May 6, 2018. It was the first iOS app I’d ever published to the App Store. Almost exactly two years later, I’m publishing this blog post and releasing an all-new, completely rewritten version of CatchUp.]]></description><pubDate>Fri, 08 May 2020 12:00:00 +0000</pubDate><dc:creator><![CDATA[Ryan Token]]></dc:creator><category><![CDATA[ios]]></category><category><![CDATA[swift]]></category><category><![CDATA[swiftui]]></category><category><![CDATA[rewrite]]></category><content:encoded><![CDATA[<p>CatchUp - Keep in Touch was first released on May 6, 2018. It was the first iOS app I’d ever published to the App Store. Almost exactly two years later, I’m publishing this blog post and releasing an all-new, completely rewritten version of CatchUp.</p><p>This post talks about the origins of CatchUp, my decision to start over from scratch, implementing SwiftUI and Core Data, and writing cleaner code. At the end of this post, I do a bit of comparison between the new version and the previous version.</p><p>When I graduated from college in 2017 I was primarily only familiar with web development. I had never taken a mobile development course in school and knew nothing about Objective-C or Swift. For whatever reason, iOS/mobile development hadn’t truly crossed my mind until after graduation. But once I started down that path in late 2017 I never turned back.</p><p>I spent the next several months learning the basics of Swift, UIKit, and everything else that comes along with iOS development. Most of that learning came via courses on <a href="https://udemy.com">Udemy</a>, tutorials from <a href="https://hackingwithswift.com">Hacking with Swift</a> and <a href="https://swiftbysundell.com">Swift by Sundell</a>, finding answers on <a href="https://stackoverflow.com">Stack Overflow</a>, and stumbling around in the dark by myself until I happened upon a solution.</p><p>When all was said and done, I had my first app. And it worked! Much like <a href="https://www.ryantoken.com/blog/rebuilding-my-website">version one of my website</a>, it wasn’t the greatest app in the world. But it was my app, and I was proud to have built it.</p><p>I put it out on the App Store on May 6, 2018, and, to my surprise, it did reasonably well. It even caught some publicity in the form of a feature in Brett Terpstra’s <a href="https://systematicpod.com/ep/218">Systematic</a> podcast around the 46:00 minute mark of episode 218.</p><p>However, over the following months/years, CatchUp began to suffer from some poor original choices made in the app.</p><h2>A Lull in Development</h2><p>During the first few months after release in 2018, I updated CatchUp semi-regularly with new features and some minor design tweaks. However, as I began evaluating some larger-scope features I wanted to implement, I continued to run into the same problem.</p><p>Above all else, my existing code was just plain <em>bad</em>.</p><p>As I mentioned, I put this out pretty much immediately after I had learned the basics of Swift and iOS development. Knowing the basics != knowing how to make a good application. My naming was poor, many functions were massive and had far too many interspersed responsibilities, there was no consistency in where components were located, I was practically trial-and-erroring my Storyboards, etc. The list could go on and truly envelop this entire post. I’ll spare you that pain.</p><p>The app was simple and straightforward enough that nearly all of this went unnoticed by users. There was only one noticeable performance issue and it didn’t bother me enough at the time. As I said, the app was doing well! It was receiving nearly all 5-star reviews and was featured on a podcast. What more could I ask for?</p><p>Lesson learned. Good reviews do not mean a high-quality application. As my plans for the app grew more ambitious, and as I learned more about proper development from my full-time job, the code atrocities I was committing became ever more glaring. I consistently ran into walls caused by poor code quality as I continued to explore implementing more robust features.</p><p>I simply lost motivation for the app about a year after release. I didn’t want to put forth the necessary effort to fix the underlying problems with the code that were holding it back. And so… In May of 2019, CatchUp was essentially left to die. Then came the email from Apple.</p><h2>Starting Over</h2><p>In March 2020, Apple sent an email to all developers with a reminder that all apps for iPhone or iPad must be built with the iOS 13 SDK or later by June 30. If they weren’t, they would no longer be available on the App Store.</p><p>CatchUp was my first iOS app; it holds a special place in my heart. But it was poorly written and had become increasingly difficult to maintain because of that.</p><p>This brought me to a crossroads of sorts. I saw three options in front of me.</p><p><strong>Option 1: Let it die.</strong></p><p>I honestly did consider this. My initial attempts at building the app with the iOS 13 SDK severely broke a significant amount of functionality. Figuring this out would mean an even bigger maintenance hole to dig myself out of.</p><p><strong>Option 2: Bite the bullet and fix the app, but stick with the core technologies I began with.</strong></p><p>This probably would have taken less time than the option I ended up choosing, but would have been far less fun, and I would have learned so much less.</p><p><strong>Option 3: Start from scratch and rewrite everything.</strong></p><p>Why not just blow away the whole project and start over?</p><p>A headlining announcement from WWDC 2019 was the debut of <a href="https://developer.apple.com/swiftui/">SwiftUI</a>. SwiftUI is a brand new framework from Apple that allows you to build user interfaces declaratively. Previously, all of iOS development was done imperatively using <a href="https://developer.apple.com/documentation/uikit">UIKit</a>. I watched the announcement happen live, and was instantly excited and drawn to it. I had initially considered rewriting parts of CatchUp with SwiftUI, but not the entire app.</p><hr /><p>Clearly I picked <strong>Option 3</strong>. SwiftUI marked the dawn of a new era in iOS development, and this was the perfect excuse for me to start a new project and learn how SwiftUI works.</p><p>Option 3 also provided the perfect opportunity to address what ended up being one of the worst decisions I made while building the original app: using <a href="https://developer.apple.com/documentation/foundation/userdefaults">UserDefaults</a> as my entire persistence/storage system instead of <a href="https://developer.apple.com/documentation/coredata">Core Data</a>.</p><p>Everything in version 1.x of CatchUp uses UserDefaults. I didn’t choose UserDefaults because I thought that was the <em>right</em> way to do it, I chose UserDefaults simply because that’s what I had learned from the Udemy course I took when first learning iOS development. I knew nothing about Core Data or how it worked at the time, and storing everything in UserDefaults has plagued CatchUp from the beginning. Until today.</p><p>So there was my path forward. A complete rebuild using SwiftUI over UIKit, and Core Data over UserDefaults. I was ecstatic about the idea, and CatchUp would get to live to see another day.</p><h2>Implementing SwiftUI</h2><p>On the same day that SwiftUI was first announced back in 2019, I started working through Apple’s (legitimately wonderful) “<a href="https://developer.apple.com/tutorials/swiftui/tutorials">Learn to Make Apps with SwiftUI</a>” tutorials. I also participated in Hacking with Swift’s (also wonderful) <a href="https://hackingwithswift.com/100/swiftui">100 Days of SwiftUI</a> course and read <a href="https://www.hackingwithswift.com/quick-start/swiftui">SwiftUI By Example</a>. All of these things together gave me enough knowledge to feel somewhat comfortable with SwiftUI, even though documentation around it was/is not quite there.</p><p>In the case of implementing Core Data, it’s been around since 2005. There are <em>plenty</em> of resources out there to help you learn and understand how it works. SwiftUI was built to play nicely with Core Data as well, so after a few articles and WWDC videos from previous years, I felt good enough on that side of things.</p><p>The rewrite started off moving at lightspeed. SwiftUI was <strong>amazing</strong>. Legitimately. I had a full mockup of all the major aspects of the user interface done in just a few hours, and they all looked better than before.</p><p>Of course, as expected and as I’ve heard from others who have used SwiftUI, once you get past the basics and move into an area where not much has been done yet, you find yourself in a strange and unknown world of mystery. Here are a couple of the strangest SwiftUI holes I found myself in.</p><p><strong>SwiftUI Issue #1:</strong></p><p>In CatchUp’s ‘Preference’ screen, there are a few different pickers you might work with. I wanted to run some code every time one of those pickers was interacted with. Sounds simple enough, right? Using SwiftUI’s onReceive modifier <em>does</em> work, but actually getting the value out the picker when onReceive is triggered is much weirder than you’d think.</p><p>You have to attach:</p><pre><code class="language-swift">[self.*someSelection*].publisher.first()
</code></pre><p>to the onReceive call, and then pass in the value from the picker via a closure. I can only hope that this is fixed in a subsequent SwiftUI update because it was maddeningly difficult to figure that out.</p><p>Here’s the workaround I found on Stack Overflow - the fix is highlighted at the bottom of the picture:</p><p><img src="https://www.ryantoken.com/images/catching-up/catchingup-onReceive.png" alt="A screenshot of SwiftUI onReceive weirdness" class="img-fluid"></p><p><strong>SwiftUI Issue #2:</strong></p><p>At the time of writing, you need to manually pass Core Data’s <a href="https://developer.apple.com/documentation/coredata/nsmanagedobject/1506677-managedobjectcontext">managed object context</a> from one view to another if you want to be able to use that context in the view you’re navigating to.</p><p>SwiftUI’s <a href="https://developer.apple.com/documentation/swiftui/environment"><code>@Environment</code></a> property wrapper should theoretically allow the managed object context to be accessible from anywhere. You shouldn’t need to manually pass it along.</p><p>Unfortunately, this appears to be a bug in the version of SwiftUI I built the app on. So I had to use the following workaround to pass in the managed object context.</p><p>Here’s what I found:</p><p><img src="https://www.ryantoken.com/images/catching-up/catchingup-moc.png" alt="A screenshot of SwiftUI managed object context weirdness" class="img-fluid"></p><p>There were several other small issues that I bumped into when building this out, but those two took me the longest to find solutions for. In general, though, this is what my browser typically looked like while in the throes of SwiftUI development:</p><p><img src="https://www.ryantoken.com/images/catching-up/catchingup-somanytabs.png" alt="A screenshot of many SwiftUI browser tabs opened at once" class="img-fluid"></p><p><em>So. Many. SwiftUI. Tabs. (shout-out to Hacking with Swift and Swift by Sundell for solving most of my problems)</em></p><p>There’s also a <strong>third issue</strong> that still hasn’t been resolved as of this post being published and the app being released. Apple’s Contacts frameworks don’t work with SwiftUI at all.</p><p>To be fair, this is the case with several frameworks since SwiftUI is still so new. However, for most frameworks that don’t work natively with SwiftUI, you can simply create a bridge into UIKit. You’d render just those views using UIKit instead of SwiftUI, then come back to SwiftUI when you’re done. The interplay between SwiftUI and UIKit was heavily advertised when SwiftUI was debuted in 2019, and, for the vast majority of frameworks, seems to work as expected.</p><p>Unfortunately, I’ve found the bridging between SwiftUI and UIKit for the contact picker to be especially buggy. This is not ideal. The contact picker - which shows up when you tap the ‘Add Contacts’ button on CatchUp’s home screen - is likely the first button you’ll ever tap in the app. I don’t want a user’s first experience with my app to feel buggy and show strange animation glitches.</p><p>I filed my first ever <a href="https://developer.apple.com/support/technical">Technical Support Incident (TSI)</a> with Apple, and hope to have a resolution for that bug shortly.</p><p>I want to make something especially clear, though: Despite the somewhat bumpy road, I have <strong>loved</strong> working with SwiftUI. It has been a true joy and has significantly improved how I go about creating user interfaces. CatchUp V1 used Storyboards exclusively, and I would be more than OK with never having to create a Storyboard again. I know I could have done my layout programmatically with UIKit, but it’s hard to imagine a system as clean and as nice as SwiftUI is proving to be.</p><h2>Wrapping Up with Clean Code</h2><p>As I was putting the finishing touches on version 2.0 of CatchUp, I started reading <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882">Clean Code</a> by “Uncle” Bob Martin.</p><p>I’ll tell you what, dear reader, there could not have been a better time for me to read this book.</p><p>Since releasing the original app in 2018, I had learned a lot. I knew the SOLID principles, I understood the importance of proper naming and concise logic, etc., but all of that truly sank in on a deeper level upon reading that book on my own.</p><p>While reading it, I found that nearly every chapter gave me some new idea on how to organize or clean up my code even further. It was a fantastic experience. I went from code, to book, to code, to book, and back and forth again and again until I was satisfied with the app as a whole.</p><p>If you haven’t read it, and you want to be a better programmer, I can’t recommend it enough. Even being over a decade old at this point, I found it incredibly valuable.</p><p>Before reading it, CatchUp 2.0 was a massive improvement in underlying code quality simply from having gained more experience and a greater understanding of what “good” code is. After reading it, I am quite proud of the quality of code I’ve written. To be sure, there is more work to be done and more improvements to be made. But to have rewritten an entire app from scratch, leave all the cruft and bad ideas behind, and come out on the other end with what I have now is immensely satisfying.</p><p>Here’s a single point of reference for you: the difference in the number of total lines of code from version 1.1.2 to version 2.0.0, one update (and one year) later.</p><p>Lines of code is by no means a proper metric for overall code quality, but I think it represents how much simplification I was able to do for what is, by all accounts, an app that has <em>more</em> functionality than the previous version.</p><p><strong>Total lines of code in CatchUp version 1.1.2:</strong> 2,924</p><p><strong>Total lines of code in CatchUp version 2.0.0:</strong> 1,905</p><p><em>Lines of code counted with <a href="https://github.com/AlDanial/cloc">cloc</a></em></p><p>Over 1,000 fewer lines of code! For an app that is more advanced and has more functionality. Talk about a significant win.</p><h2>What’s Next</h2><p>With SwiftUI and cleaner code, CatchUp is ready for the new era of iOS development. I plan to write all of my personal apps in SwiftUI going forward unless there is something that makes it physically impossible to do so.</p><p>I’m proud of the product that’s available out there now, and look forward to continuing to build on the modern foundation it has today.</p><p>CatchUp is completely free with no ads. Download the all-new CatchUp – Keep in Touch here:</p><p><a href="https://apps.apple.com/us/app/catchup-keep-in-touch/id1358023550?itsct=apps_box_badge&amp;itscg=30200" style="display: inline-block; overflow: hidden; border-radius: 13px; width: 250px; height: 125px;"><img src="https://tools.applemediaservices.com/api/badges/download-on-the-app-store/black/en-us?size=250x83&amp;releaseDate=1526515200" alt="Download on the App Store" style="border-radius: 13px; width: 250px; height: 83px;"></a></p>]]></content:encoded></item><item><guid isPermaLink="true">https://www.ryantoken.com/blog/rebuilding-my-website</guid><title>Rebuilding My Website</title><link>https://www.ryantoken.com/blog/rebuilding-my-website</link><description><![CDATA[The summer of 2015 was the summer between my sophomore and junior years at the University of Tulsa. I had taken a few programming classes by that point, and was drawn to web development. To prove to myself that I knew my way around the basics, I wanted to build a personal website – I didn’t have a plan for it, but I knew that I wanted it.]]></description><pubDate>Sun, 22 Mar 2020 12:00:00 +0000</pubDate><dc:creator><![CDATA[Ryan Token]]></dc:creator><category><![CDATA[web]]></category><category><![CDATA[swift]]></category><category><![CDATA[rewrite]]></category><content:encoded><![CDATA[<p>The summer of 2015 was the summer between my sophomore and junior years at the University of Tulsa. I had taken a few programming classes by that point, and was drawn to web development. To prove to myself that I knew my way around the basics, I wanted to build a personal website – I didn’t have a plan for it, but I knew that I wanted it.</p><p>Most recently, I had learned about a tool called <strong><a href="https://getbootstrap.com">Bootstrap</a></strong>. Everyone and their mother was raving about Bootstrap. In 2015, it sounded like the end-all be-all for responsive web design. Spoiler: it wasn’t. But I, a young and impressionable college student, Bootstrapped the ever-loving heck out of version one of my website.</p><p>See for yourself: (most text blurred out for my own privacy)</p><p><img src="https://www.ryantoken.com/images/rebuilding-my-website/rmw-websiteV1-blurred.png" alt="ryantoken.com v1" class="img-fluid"></p><p><em>You don’t get much more Bootstrappy than that.</em></p><p>There are several items there that scream Bootstrap (and inexperience) if you know what you’re looking for.</p><p>What screams Bootstrap? If you’re familiar with it at all, you’ll probably notice them immediately. The header, the Jumbotron (or Hero Unit, as Bootstrap now calls it), the three-column layout, and the footer.</p><p>All four of those items are classic, vanilla Bootstrap with very few modifications. Remember – in 2015 I was a bona-fide noob in the world of web development. I had no idea what I was doing. Bootstrap was awesome, and in some ways still is. It solved a lot of problems for a fledgling web developer.</p><p>Also, apparently CSS gradients were the greatest things I’d ever seen, as I threw different variations of them wherever I could fit them.</p><p>But hey, this was the first website I had built completely on my own. I had no input from a boss, teachers, or fellow students. I was, and still am, proud that I built it. I learned a lot that I wouldn’t have learned otherwise, it helped solidify my love of web development, and when all was said and done, there was a product out there that the world could see.</p><h2>Iterations</h2><p>So that was 2015. Until this complete rebuild in March of 2020, it stayed <em>more or less</em> the same for the next several years. It did go through a couple of design refreshes over that time, though.</p><p>Notably:</p><p><img src="https://www.ryantoken.com/images/rebuilding-my-website/rmw-websiteV2-blurred.png" alt="ryantoken.com v2" class="img-fluid"></p><p>And then:</p><p><img src="https://www.ryantoken.com/images/rebuilding-my-website/rmw-websiteV3-blurred.png" alt="ryantoken.com v3" class="img-fluid"></p><p>In the first of those two design refreshes, I got my feet wet with transparency, and added some dynamic functionality to the footer that let you navigate the website page-by-page from there.</p><p>The second is how the website looked the day before I published the rewrite you’re reading this on now.</p><p>I finally got rid of those blue-teal gradient boxes, left the three-column layout behind, added some dimensionality and pictures, and significantly simplified the codebase.</p><p>However, after five years of the same basic layout, it was time for a complete re-think of my website. The previous site felt stale and I didn’t enjoy working on it or adding to it as much anymore. More than anything, though, was the fact that I’m out of college now.</p><p>The previous site was very much focused on me, my resume, and my portfolio of projects. I no longer felt that I needed as much of a ‘resume’ site. My mindset has shifted dramatically since college, and so my website needed to shift dramatically along with it.</p><h2>Considering My Options</h2><p>I knew I wanted to completely recreate the website with modern developer tools and a system that would be easy and fun to iterate on. I did not know, however, what exactly I’d be using to kick this off. To help narrow those options down, I listed out my goals for the site:</p><ul><li>It should have a blogging component</li><li>It should be fun for me to work on and add to, instead of feeling like a chore</li><li>It should be built with a modern language and toolset</li><li>It should not look like every other personal website out there</li></ul><p>I’ve added several new skills to my personal toolbox since 2015, my favorites of which are <a href="https://reactjs.org">React</a> and <a href="https://www.swift.org">Swift</a>. I use React for most of my web projects, and Swift and <a href="https://developer.apple.come/xcode/swiftui.com">SwiftUI</a> for native iOS projects.</p><p>On the side, I run a podcast and blog covering University of Tulsa athletics. As part of that, I built <a href="https://thegoldenhurricast.com">our website</a> with React. That was my first React project, and you might see some similarities to the screenshots above. That’s because, more for comfort than anything, I used <a href="https://react-bootstrap.github.io">React Bootstrap</a> to create the front-end. It’s basically Bootstrap rebuilt for use in a React environment. It was easy to pick up due to my familiarity with Bootstrap, and I liked it, but I’ve since been using <a href="https://material-ui.com">Material-UI</a> for React projects.</p><p>I wrote a <a href="https://thegoldenhurricast.com/blog">blogging engine</a> with React as part of that project, and my first inclination was to reuse the skills I had picked up from that. I would’ve gone with Material-UI instead of React Bootstrap for the front-end design, but I could have reused a lot of the rest. That would have been the easier way for me, and I strongly considered that option.</p><p>Contrarily, I’ve been pretty deep into iOS development since 2017. I taught myself Swift, released my <a href="https://apps.apple.com/us/app/catchup-keep-in-touch/id1358023550">first iOS app</a> in May of 2018, and have several more that I’ve worked on locally but haven’t released. Let me be clear, I <em>really</em> enjoy writing code with Swift. The type-safety, readability, community, and plenty more made it incredibly fun to learn.</p><p>I’ve long wanted to build a website with Swift, but was never fully satisfied with the available tools. I’ve toyed around with server-side Swift frameworks like <a href="https://vapor.codes">Vapor</a> and <a href="https://kitura.io">Kitura</a>, and found both to be capable but overly-complicated solutions for what I wanted.</p><p>And then I found <a href="https://github.com/JohnSundell/Publish">Publish</a>. Publish is an open-source “static site generator for Swift developers” built by <a href="https://twitter.com/johnsundell">John Sundell</a>. John is a former lead iOS developer at Spotify who now runs his own company called <a href="https://swiftbysundell.com">Swift by Sundell</a> that is, naturally, all about Swift development. Publish was open-sourced in December of 2019, and all of Swift by Sundell is built with Publish.</p><h2>A Full Redesign – Zero JavaScript</h2><p>I cloned Publish from GitHub to familiarize myself with it for a few days, and was hooked. I decided that this was the best (and most fun) answer.</p><p>Publish was exactly what I was looking for. It lets you build and configure your <strong>entire website</strong> with Swift and <a href="https://daringfireball.net/projects/markdown">Markdown</a>, nearly everything is customizable, and it comes with native support for blogging built in. It also supports custom themes, plugins, and a host of other powerful options.</p><p>There is <strong>zero JavaScript</strong> throughout the entire site. This doesn’t attempt to solve the <a href="https://www.youtube.com/watch?v=kZRE7HIO3vk&t=4160s">Thirty Million Line Problem</a>, but it does mitigate the bloat of <a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f">JavaScript Framework Hell</a>. Long story short, front-end JavaScript frameworks come with a LOT of bloat, most of which will never be of use to you. Getting rid of all that code speeds up load times <em>significantly</em>, hopefully you’ll notice that while navigating my site.</p><p>The main Swift file to build a site with Publish is incredibly simple to understand. Here’s what mine first looked like:</p><p><img src="https://www.ryantoken.com/images/rebuilding-my-website/rmw-publish-basic.png" alt="main.swift file in Publish" class="img-fluid"></p><p>First, there’s an enum called SectionID. This is where you describe what sections your website will have. Mine are the four main tabs at the top of the page: <a href="https://www.ryantoken.com/blog">Blog</a>, <a href="https://www.ryantoken.com/projects">Projects</a>, and <a href="https://www.ryantoken.com/about">About</a>.</p><p>Next, there’s a struct called <code>ItemMetadata</code>. This is site-specific metadata which we’ll be able to use in a fully type-safe manner all throughout our publishing process. I don’t have anything in there at this point because, honestly, I don’t know what benefit it would give a site as simple as mine.</p><p>And finally, there are five variables that finalize some information for the website. The last step is the <code>try</code> statement that actually calls on Publish to generate the HTML and CSS files that your browser will serve up to show you this page.</p><p>It’s really an incredibly simple layout.</p><p>This blog post, and every one that will come after it, are simple Markdown files that the Swift package can reference.</p><h2>Next Steps</h2><p>When this post comes out, I will still be using Publish’s built-in theme for the site. However, Publish uses another framework (also built by John Sundell) called Plot that allows for custom themes to be built and used by Publish.</p><p>My next goal for this site is to create my own theme and really customize a lot of it. Step one was just to get it the new site out the door.</p><p>I’m incredibly excited for the journey that this site will lead me down. I’ve been dying to use Swift for something outside of strictly Apple development, and have also badly wanted to create my own blog. Publish satisfies both of those needs while allowing for as little or as much customization as I’d want or need.</p><p>I plan to dive head-first into Plot (Sundell’s theming engine) in the very near future to add some more color, dynamism, and customization to the site. Keep an eye out for changes in that area soon.</p><p>Stay tuned! I can’t wait to see how this goes.</p>]]></content:encoded></item></channel></rss>